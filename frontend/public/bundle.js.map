{"version":3,"file":"bundle.js","sources":["../src/engine/scene.ts","../src/engine/objects/triangle.ts","../src/engine/loaders/texture-loader.ts","../../node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js","../src/engine/objects/sphere.ts","../src/engine/camera/camera.ts","../src/engine/camera/camera-controls.ts","../src/engine/renderer.ts","../src/main.ts"],"sourcesContent":[null,null,null,"/* wgpu-matrix@3.2.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    const rotationZ = rotation;\n    /**\n     * Rotates the given 3-by-3 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotateZ = rotate;\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has two\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * two entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     3 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling3D(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 3 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale3D(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in the X and Y dimensions\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in the X and Y dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling3D(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale3D(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n        scaling3D,\n        scale3D,\n        uniformScaling3D,\n        uniformScale3D,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n",null,null,null,null,null],"names":["Scene","device","objects","constructor","this","console","log","addObject","object","push","removeObject","index","indexOf","splice","getObjects","draw","passEncoder","camera","obj","Triangle","pipeline","vertexBuffer","color","position","uniformBuffer","bindGroup","Float32Array","initializeBuffers","createPipeline","createVertexBuffer","createUniformBuffer","vertices","createBuffer","size","byteLength","usage","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","set","unmap","UNIFORM","COPY_DST","fragmentShaderCode","join","createRenderPipeline","label","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","createBindGroup","bindGroupLayout","getBindGroupLayout","entries","binding","resource","buffer","queue","writeBuffer","viewMatrix","byteOffset","projectionMatrix","setPipeline","setVertexBuffer","setBindGroup","async","loadTexture","imageUrl","img","Image","src","decode","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","texture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","writeTexture","data","bytesPerRow","rowsPerImage","depthOrArrayLayers","ZeroArray","OriginalConstructor","modifier","a","fill","args","super","EPSILON","cache$5","Map","getAPI$5","Ctor","api","get","create","x","y","newDst","undefined","subtract","b","dst","lerp","t","mulScalar","v","k","inverse","dot","length","v0","v1","Math","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","fromValues","ceil","floor","round","clamp","min","max","add","addScaled","scale","angle","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","abs","equals","lerpV","divScalar","invert","cross","z","lenSq","dist","distSq","negate","clone","mul","div","random","PI","cos","sin","zero","transformMat4","m","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl$5","cache$4","getAPI$4","v2","dz","az","bz","t1","t2","zScale","w","transformMat4Upper3x3","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","rotateX","p","r","rotateY","rotateZ","getAPIImpl$4","cache$3","getAPI$3","vec2","vec3","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","rotation","angleInRadians","c","s","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","transpose","determinant","setTranslation","setAxis","get3DScaling","translation","translate","rotationX","rotationY","rotationZ","scaling","uniformScaling","uniformScale","scaling3D","scale3D","uniformScaling3D","uniformScale3D","getAPIImpl$3","cache$2","getAPI$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","d","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","right","bottom","top","near","far","frustum","frustumReverseZ","aim","target","up","cameraAim","eye","lookAt","getAPIImpl$2","cache$1","getAPI$1","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","i","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","getAPIImpl$1","cache","getAPI","dw","getAPIImpl","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","mat4","quat","vec4","Float64Array","Array","Sphere","indexBuffer","radius","sampler","numIndices","textures","earthTextures","currentTextureIndex","modelMatrix","initializeBindGroupLayout","createBindGroupLayout","visibility","GPUShaderStage","type","hasDynamicOffset","minBindingSize","FRAGMENT","sampleType","loadTextures","texturePaths","path","baseMap","normalMap","specularMap","createSampler","magFilter","minFilter","addressModeU","addressModeV","updateBindGroup","createView","error","segments","indices","lat","theta","sinTheta","cosTheta","lon","phi","sinPhi","cosPhi","u","first","second","INDEX","Uint32Array","createPipelineLayout","bindGroupLayouts","updateUniformBuffer","axisVec","setIndexBuffer","drawIndexed","Camera","fov","aspectRatio","orientation","angularVelocity","updateViewMatrix","setAspectRatio","updateProjectionMatrix","setPosition","move","direction","CameraControls","isMouseDown","lastMouseX","lastMouseY","mouseDelta","addKeyboardListeners","addMouseListeners","window","addEventListener","handleKeyDown","handleMouseDown","handleMouseUp","handleMouseMove","handleMouseWheel","event","clientX","clientY","deltaX","deltaY","preventDefault","zoomDirection","cameraDirection","updateCameraOrbit","deltaTime","atan2","key","moveCamera","Renderer","context","swapChainFormat","scene","cameraControls","depthTexture","lastRenderTime","sphere","canvasId","getElementById","initializeWebGPU","then","clearCanvas","createDepthTexture","resizeCanvas","triangle","triangle2","startRenderingLoop","catch","destroy","navigator","gpu","adapter","requestAdapter","requestDevice","devicePixelRatio","clientWidth","clientHeight","configuration","alphaMode","configure","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","view","getCurrentTexture","loadOp","clearValue","g","storeOp","beginRenderPass","end","commands","finish","submit","frame","render","requestAnimationFrame","depthStencilAttachment","depthLoadOp","depthClearValue","depthStoreOp","checkWebGPUSupport","supported"],"mappings":"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"}