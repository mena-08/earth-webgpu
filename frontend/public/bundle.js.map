{"version":3,"file":"bundle.js","sources":["../src/engine/scene.ts","../src/engine/objects/triangle.ts","../src/engine/objects/sphere.ts","../../node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js","../src/engine/camera/camera.ts","../src/engine/camera/camera-controls.ts","../src/engine/renderer.ts","../src/main.ts"],"sourcesContent":[null,null,null,"/* wgpu-matrix@3.1.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n",null,null,null,null],"names":["Scene","device","objects","constructor","this","console","log","addObject","object","push","removeObject","index","indexOf","splice","getObjects","draw","passEncoder","camera","obj","Triangle","pipeline","vertexBuffer","color","position","uniformBuffer","bindGroup","Float32Array","initializeBuffers","createPipeline","createVertexBuffer","createUniformBuffer","vertices","createBuffer","size","byteLength","usage","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","set","unmap","UNIFORM","COPY_DST","fragmentShaderCode","join","createRenderPipeline","label","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","primitive","topology","createBindGroup","bindGroupLayout","getBindGroupLayout","entries","binding","resource","buffer","queue","writeBuffer","viewMatrix","byteOffset","projectionMatrix","setPipeline","setVertexBuffer","setBindGroup","Sphere","indexBuffer","radius","numIndices","segments","indices","lat","theta","Math","PI","sinTheta","sin","cosTheta","cos","lon","phi","sinPhi","cosPhi","x","y","z","first","second","length","INDEX","Uint32Array","setIndexBuffer","drawIndexed","ZeroArray","OriginalConstructor","modifier","a","fill","args","super","EPSILON","cache$5","Map","getAPI$5","Ctor","api","get","create","newDst","undefined","subtract","b","dst","lerp","t","mulScalar","v","k","inverse","dot","v0","v1","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","fromValues","ceil","floor","round","clamp","min","max","add","addScaled","scale","angle","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","abs","equals","lerpV","divScalar","invert","cross","lenSq","dist","distSq","negate","clone","mul","div","random","zero","transformMat4","m","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl$5","cache$4","getAPI$4","v2","dz","az","bz","t1","t2","zScale","w","transformMat4Upper3x3","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","rotateX","p","r","rotateY","rotateZ","getAPIImpl$4","cache$3","getAPI$3","vec2","vec3","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","transpose","determinant","setTranslation","setAxis","get3DScaling","translation","translate","rotation","angleInRadians","c","s","scaling","uniformScaling","uniformScale","getAPIImpl$3","cache$2","getAPI$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","d","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","right","bottom","top","near","far","frustum","frustumReverseZ","aim","target","up","cameraAim","eye","lookAt","rotationX","rotationY","rotationZ","getAPIImpl$2","cache$1","getAPI$1","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","i","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","getAPIImpl$1","cache","getAPI","dw","getAPIImpl","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","mat4","quat","vec4","Float64Array","Array","Camera","fov","aspectRatio","orientation","angularVelocity","updateViewMatrix","setPosition","updateProjectionMatrix","move","direction","CameraControls","canvas","isMouseDown","lastMouseX","lastMouseY","mouseDelta","addKeyboardListeners","addMouseListeners","window","addEventListener","handleKeyDown","handleMouseDown","handleMouseUp","handleMouseMove","event","clientX","clientY","deltaX","deltaY","updateCameraOrbit","deltaTime","atan2","key","moveCamera","preventDefault","Renderer","context","swapChainFormat","scene","cameraControls","canvasId","document","getElementById","initializeWebGPU","then","clearCanvas","width","height","triangle","triangle2","sphere","startRenderingLoop","catch","error","navigator","gpu","adapter","requestAdapter","requestDevice","getContext","devicePixelRatio","clientWidth","clientHeight","configuration","alphaMode","configure","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","view","getCurrentTexture","createView","loadOp","clearValue","g","storeOp","beginRenderPass","end","commands","finish","submit","frame","render","requestAnimationFrame","async","checkWebGPUSupport","supported"],"mappings":"+BAGaA,EACDC,OACAC,QAER,WAAAC,CAAYF,GACRG,KAAKH,OAASA,EACdG,KAAKF,QAAU,GACfG,QAAQC,IAAI,iBACf,CAED,SAAAC,CAAUC,GACNJ,KAAKF,QAAQO,KAAKD,EACrB,CAED,YAAAE,CAAaF,GACT,MAAMG,EAAQP,KAAKF,QAAQU,QAAQJ,GAC/BG,GAAS,GACTP,KAAKF,QAAQW,OAAOF,EAAO,EAElC,CAED,UAAAG,GACI,OAAOV,KAAKF,OACf,CAED,IAAAa,CAAKC,EAAmCC,GACpC,IAAK,MAAMC,KAAOd,KAAKF,QACnBgB,EAAIH,KAAKC,EAAaC,EAE7B,QC5BQE,EACDlB,OACAmB,SACAC,aACAC,MACAC,SACAC,cACAC,UAER,WAAAtB,CAAYF,EAAmBqB,EAAyCC,GACpEnB,KAAKH,OAASA,EACdG,KAAKkB,MAAQ,IAAII,aAAaJ,GAC9BlB,KAAKmB,SAAW,IAAIG,aAAaH,GACjCnB,KAAKuB,oBACLvB,KAAKwB,gBACR,CAEO,iBAAAD,GACJvB,KAAKyB,qBACLzB,KAAK0B,qBACR,CAEO,kBAAAD,GACJ,MAAME,EAAW,IAAIL,aAAa,CAC9B,EAAMtB,KAAKmB,SAAS,GAAI,GAAMnB,KAAKmB,SAAS,GAAInB,KAAKmB,SAAS,GAAI,GACjE,GAAMnB,KAAKmB,SAAS,IAAK,GAAMnB,KAAKmB,SAAS,GAAInB,KAAKmB,SAAS,GAAI,EACpE,GAAMnB,KAAKmB,SAAS,IAAK,GAAMnB,KAAKmB,SAAS,GAAInB,KAAKmB,SAAS,GAAI,IAEvEnB,KAAKiB,aAAejB,KAAKH,OAAO+B,aAAa,CACzCC,KAAMF,EAASG,WACfC,MAAOC,eAAeC,OACtBC,kBAAkB,IAEtB,IAAIZ,aAAatB,KAAKiB,aAAakB,kBAAkBC,IAAIT,GACzD3B,KAAKiB,aAAaoB,OACrB,CAEO,mBAAAX,GAEJ1B,KAAKoB,cAAgBpB,KAAKH,OAAO+B,aAAa,CAC1CC,KAAM,IACNE,MAAOC,eAAeM,QAAUN,eAAeO,UAEtD,CAEO,cAAAf,GACJ,MAgBMgB,EAAqB,uGAGJxC,KAAKkB,MAAMuB,KAAK,oBAGvCzC,KAAKgB,SAAWhB,KAAKH,OAAO6C,qBAAqB,CAC7CC,MAAO,oBACPC,OAAQ,OACRC,OAAQ,CACJC,OAAQ9C,KAAKH,OAAOkD,mBAAmB,CACnCC,KA3Ba,0bA6BjBC,WAAY,UACZC,QAAS,CAAC,CACNC,YAAa,GACbC,WAAY,CAAC,CACTC,eAAgB,EAChBC,OAAQ,EACRC,OAAQ,iBAIpBC,SAAU,CACNV,OAAQ9C,KAAKH,OAAOkD,mBAAmB,CACnCC,KAAMR,IAEVS,WAAY,UACZQ,QAAS,CAAC,CACNF,OAAQ,gBAGhBG,UAAW,CACPC,SAAU,mBAGlB3D,KAAK4D,iBACR,CAEO,eAAAA,GACJ,MAAMC,EAAkB7D,KAAKgB,SAAS8C,mBAAmB,GACzD9D,KAAKqB,UAAYrB,KAAKH,OAAO+D,gBAAgB,CACzChB,OAAQiB,EACRE,QAAS,CAAC,CACNC,QAAS,EACTC,SAAU,CACNC,OAAQlE,KAAKoB,cACbS,KAAM,QAIrB,CAED,IAAAlB,CAAKC,EAAmCC,GAEpCb,KAAKH,OAAOsE,MAAMC,YACdpE,KAAKoB,cACL,EACAP,EAAOwD,WAAWH,OAClBrD,EAAOwD,WAAWC,WAClBzD,EAAOwD,WAAWvC,YAEtB9B,KAAKH,OAAOsE,MAAMC,YACdpE,KAAKoB,cACL,GACAP,EAAO0D,iBAAiBL,OACxBrD,EAAO0D,iBAAiBD,WACxBzD,EAAO0D,iBAAiBzC,YAG5BlB,EAAY4D,YAAYxE,KAAKgB,UAC7BJ,EAAY6D,gBAAgB,EAAGzE,KAAKiB,cACpCL,EAAY8D,aAAa,EAAG1E,KAAKqB,WACjCT,EAAYD,KAAK,EAAG,EAAG,EAAG,EAC7B,QCzIQgE,EACD9E,OACAmB,SACAC,aACA2D,YACA1D,MACAC,SACA0D,OAAiB,GACjBC,WACA1D,cACAC,UAER,WAAAtB,CAAYF,EAAmBqB,EAAyCC,EAAoC0D,GACxG7E,KAAKH,OAASA,EACdG,KAAKkB,MAAQ,IAAII,aAAaJ,GAC9BlB,KAAKmB,SAAW,IAAIG,aAAaH,GACjCnB,KAAK6E,OAASA,EACd7E,KAAKuB,oBACLvB,KAAKwB,gBACR,CAEO,iBAAAD,GACJvB,KAAKyB,qBACLzB,KAAK0B,qBACR,CAEO,kBAAAD,GACJ,MAAMsD,EAAW,GACXpD,EAAW,GACXqD,EAAU,GAEhB,IAAK,IAAIC,EAAM,EAAGA,GAAOF,EAAUE,IAAO,CACtC,MAAMC,EAAQD,EAAME,KAAKC,GAAKL,EACxBM,EAAWF,KAAKG,IAAIJ,GACpBK,EAAWJ,KAAKK,IAAIN,GAE1B,IAAK,IAAIO,EAAM,EAAGA,GAAOV,EAAUU,IAAO,CACtC,MAAMC,EAAY,EAAND,EAAUN,KAAKC,GAAKL,EAC1BY,EAASR,KAAKG,IAAII,GAClBE,EAAST,KAAKK,IAAIE,GAElBG,EAAI7F,KAAK6E,OAASe,EAASP,EAC3BS,EAAI9F,KAAK6E,OAASU,EAClBQ,EAAI/F,KAAK6E,OAASc,EAASN,EAKjC1D,EAAStB,KAAKwF,EAAI7F,KAAKmB,SAAS,GAAI2E,EAAI9F,KAAKmB,SAAS,GAAI4E,EAAI/F,KAAKmB,SAAS,GAAI,EACnF,CACJ,CAED,IAAK,IAAI8D,EAAM,EAAGA,EAAMF,EAAUE,IAC9B,IAAK,IAAIQ,EAAM,EAAGA,EAAMV,EAAUU,IAAO,CACrC,MAAMO,EAAY,GAAHf,EAAwBQ,EACjCQ,EAASD,EAAQjB,EAAW,EAElCC,EAAQ3E,KAAK2F,EAAOC,EAAQD,EAAQ,GACpChB,EAAQ3E,KAAK4F,EAAQA,EAAS,EAAGD,EAAQ,EAC5C,CAGLhG,KAAK8E,WAAaE,EAAQkB,OAE1BlG,KAAKiB,aAAejB,KAAKH,OAAO+B,aAAa,CACzCC,KAAwB,EAAlBF,EAASuE,OACfnE,MAAOC,eAAeC,OACtBC,kBAAkB,IAEtB,IAAIZ,aAAatB,KAAKiB,aAAakB,kBAAkBC,IAAI,IAAId,aAAaK,IAC1E3B,KAAKiB,aAAaoB,QAElBrC,KAAK4E,YAAc5E,KAAKH,OAAO+B,aAAa,CACxCC,KAAuB,EAAjBmD,EAAQkB,OACdnE,MAAOC,eAAemE,MACtBjE,kBAAkB,IAEtB,IAAIkE,YAAYpG,KAAK4E,YAAYzC,kBAAkBC,IAAI,IAAIgE,YAAYpB,IACvEhF,KAAK4E,YAAYvC,OACpB,CAEO,mBAAAX,GACJ1B,KAAKoB,cAAgBpB,KAAKH,OAAO+B,aAAa,CAC1CC,KAAM,IACNE,MAAOC,eAAeM,QAAUN,eAAeO,UAEtD,CAIO,cAAAf,GACJ,MAgBMgB,EAAqB,mHAGAxC,KAAKkB,MAAMuB,KAAK,kCAI3CzC,KAAKgB,SAAWhB,KAAKH,OAAO6C,qBAAqB,CAC7CE,OAAO,OACPD,MAAO,kBACPE,OAAQ,CACJC,OAAQ9C,KAAKH,OAAOkD,mBAAmB,CACnCC,KA5Ba,ynBA8BjBC,WAAY,UACZC,QAAS,CAAC,CACNC,YAAa,GACbC,WAAY,CAAC,CACTC,eAAgB,EAChBC,OAAQ,EACRC,OAAQ,iBAIpBC,SAAU,CACNV,OAAQ9C,KAAKH,OAAOkD,mBAAmB,CACnCC,KAAMR,IAEVS,WAAY,UACZQ,QAAS,CAAC,CACNF,OAAQ,gBAGhBG,UAAW,CACPC,SAAU,mBAGlB3D,KAAK4D,iBACR,CAEO,eAAAA,GACJ,MAAMC,EAAkB7D,KAAKgB,SAAS8C,mBAAmB,GACzD9D,KAAKqB,UAAYrB,KAAKH,OAAO+D,gBAAgB,CACzChB,OAAQiB,EACRE,QAAS,CAAC,CACNC,QAAS,EACTC,SAAU,CACNC,OAAQlE,KAAKoB,cACbS,KAAM,QAIrB,CAED,IAAAlB,CAAKC,EAAmCC,GACpCb,KAAKH,OAAOsE,MAAMC,YACdpE,KAAKoB,cACL,EACAP,EAAOwD,WAAWH,OAClBrD,EAAOwD,WAAWC,WAClBzD,EAAOwD,WAAWvC,YAGtB9B,KAAKH,OAAOsE,MAAMC,YACdpE,KAAKoB,cACL,GACAP,EAAO0D,iBAAiBL,OACxBrD,EAAO0D,iBAAiBD,WACxBzD,EAAO0D,iBAAiBzC,YAG5BlB,EAAY4D,YAAYxE,KAAKgB,UAC7BJ,EAAY6D,gBAAgB,EAAGzE,KAAKiB,cACpCL,EAAYyF,eAAerG,KAAK4E,YAAa,UAC7ChE,EAAY8D,aAAa,EAAG1E,KAAKqB,WACjCT,EAAY0F,YAAYtG,KAAK8E,WAChC,ECjLL,MAAMyB,GARmBC,EAQQ,MARaC,EAQHC,GAAKA,EAAEC,KAAK,GAP5C,cAAcH,EACjB,WAAAzG,IAAe6G,GACXC,SAASD,GACTH,EAASzG,KACZ,IALT,IAAyBwG,EAAqBC,EA+B9C,IAAIK,EAAU,KA0vBd,MAAMC,EAAU,IAAIC,IACpB,SAASC,EAASC,GACd,IAAIC,EAAMJ,EAAQK,IAAIF,GAKtB,OAJKC,IACDA,EAppBR,SAAsBD,GAiBlB,SAASG,EAAOxB,EAAI,EAAGC,EAAI,GACvB,MAAMwB,EAAS,IAAIJ,EAAK,GAOxB,YANUK,IAAN1B,IACAyB,EAAO,GAAKzB,OACF0B,IAANzB,IACAwB,EAAO,GAAKxB,IAGbwB,CACV,CA4HD,SAASE,EAASd,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAsCD,SAASK,EAAKjB,EAAGe,EAAGG,EAAGF,GACnB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IAC1BY,CACV,CAsDD,SAASO,EAAUC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,CA4BD,SAASU,EAAQF,EAAGJ,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GACXR,CACV,CA+BD,SAASW,EAAIvB,EAAGe,GACZ,OAAOf,EAAE,GAAKe,EAAE,GAAKf,EAAE,GAAKe,EAAE,EACjC,CAMD,SAASvB,EAAO4B,GACZ,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACb,OAAO3C,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EACnC,CAYD,SAASE,EAASP,GACd,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACb,OAAOI,EAAKA,EAAKC,EAAKA,CACzB,CAaD,SAASG,EAAS5B,EAAGe,GACjB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACpB,OAAOtC,KAAKiD,KAAKG,EAAKA,EAAKC,EAAKA,EACnC,CAcD,SAASC,EAAW/B,EAAGe,GACnB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACpB,OAAOc,EAAKA,EAAKC,EAAKA,CACzB,CAcD,SAASE,EAAUZ,EAAGJ,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPa,EAAMxD,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,GASrC,OARIQ,EAAM,MACNrB,EAAO,GAAKY,EAAKS,EACjBrB,EAAO,GAAKa,EAAKQ,IAGjBrB,EAAO,GAAK,EACZA,EAAO,GAAK,GAETA,CACV,CAoBD,SAASsB,EAAKd,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACPR,CACV,CAiBD,SAASuB,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAkBD,SAASwB,EAAOpC,EAAGe,EAAGC,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CA4FD,SAASyB,EAAUrC,EAAGiC,EAAKjB,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAEhC,OADAwB,EAAUhC,EAAGY,GACNO,EAAUP,EAAQqB,EAAKrB,EACjC,CA0BD,MAAO,CACHD,SACA2B,WA7jBe3B,EA8jBfjF,IApjBJ,SAAayD,EAAGC,EAAG4B,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKzB,EACZyB,EAAO,GAAKxB,EACLwB,CACV,EAgjBG2B,KAziBJ,SAAcnB,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACjBR,CACV,EAqiBG4B,MA9hBJ,SAAepB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IAClBR,CACV,EA0hBG6B,MAnhBJ,SAAerB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IAClBR,CACV,EA+gBG8B,MAtgBJ,SAAetB,EAAGuB,EAAM,EAAGC,EAAM,EAAG5B,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KACnCR,CACV,EAkgBGiC,IA1fJ,SAAa7C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,EAsfGkC,UA7eJ,SAAmB9C,EAAGe,EAAGgC,EAAO/B,GAC5B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EACnBnC,CACV,EAyeGoC,MAleJ,SAAehD,EAAGe,GACd,MAAMkC,EAAKjD,EAAE,GACPkD,EAAKlD,EAAE,GACPmD,EAAKpC,EAAE,GACPqC,EAAKrC,EAAE,GAGPsC,EAFO5E,KAAKiD,KAAKuB,EAAKA,EAAKC,EAAKA,GACzBzE,KAAKiD,KAAKyB,EAAKA,EAAKC,EAAKA,GAEhCE,EAASD,GAAO9B,EAAIvB,EAAGe,GAAKsC,EAClC,OAAO5E,KAAK8E,KAAKD,EACpB,EAydGxC,WACA0C,IArcQ1C,EAscR2C,oBA/bJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,CAC/B,EA6bGuD,OAtbJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,EACtC,EAqbGE,OACA2C,MA3ZJ,SAAe5D,EAAGe,EAAGG,EAAGF,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IAC7BY,CACV,EAuZGgC,IA7YJ,SAAa5C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IACtBH,CACV,EAyYG+B,IA/XJ,SAAa3C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IACtBH,CACV,EA2XGO,YACA4B,MAvWU5B,EAwWV0C,UAhWJ,SAAmBzC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,EA4VGU,UACAwC,OA1UWxC,EA2UXyC,MAlUJ,SAAe/D,EAAGe,EAAGC,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BnB,EAAIW,EAAE,GAAKe,EAAE,GAAKf,EAAE,GAAKe,EAAE,GAIjC,OAHAH,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKvB,EACLuB,CACV,EA4TGW,MACA/B,SACAyC,IApSQzC,EAqSRmC,WACAqC,MAtRUrC,EAuRVC,WACAqC,KAtQSrC,EAuQTG,aACAmC,OAtPWnC,EAuPXC,YACAmC,OA5NJ,SAAgB/C,EAAGJ,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACRR,CACV,EAwNGsB,OACAkC,MApMUlC,EAqMVC,WACAkC,IA/KQlC,EAgLRC,SACAkC,IA1JQlC,EA2JRmC,OApJJ,SAAgBxB,EAAQ,EAAG/B,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BwC,EAAwB,EAAhBvE,KAAK8F,SAAe9F,KAAKC,GAGvC,OAFAkC,EAAO,GAAKnC,KAAKK,IAAIkE,GAASD,EAC9BnC,EAAO,GAAKnC,KAAKG,IAAIoE,GAASD,EACvBnC,CACV,EA+IG4D,KAzIJ,SAAcxD,GACV,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAGhC,OAFAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACLA,CACV,EAqIG6D,cA7HJ,SAAuBrD,EAAGsD,EAAG1D,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BrB,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GAGZ,OAFAR,EAAO,GAAKzB,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKA,EAAE,IACpC9D,EAAO,GAAKzB,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKA,EAAE,IAC7B9D,CACV,EAuHG+D,cA9GJ,SAAuBvD,EAAGsD,EAAG1D,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BrB,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GAGZ,OAFAR,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GACpC9D,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAC7B9D,CACV,EAwGGgE,OA/FJ,SAAgB5E,EAAGe,EAAG8D,EAAK7D,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAE1BsE,EAAK9E,EAAE,GAAKe,EAAE,GACdgE,EAAK/E,EAAE,GAAKe,EAAE,GACdiE,EAAOvG,KAAKG,IAAIiG,GAChBI,EAAOxG,KAAKK,IAAI+F,GAItB,OAFAjE,EAAO,GAAKkE,EAAKG,EAAOF,EAAKC,EAAOjE,EAAE,GACtCH,EAAO,GAAKkE,EAAKE,EAAOD,EAAKE,EAAOlE,EAAE,GAC/BH,CACV,EAqFGyB,YACA6C,SAlEJ,SAAkBlF,EAAGmF,EAAQnE,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAChC,OAAIhB,EAAOQ,GAAKmF,EACL9C,EAAUrC,EAAGmF,EAAQvE,GAEzBsB,EAAKlC,EAAGY,EAClB,EA6DGwE,SArDJ,SAAkBpF,EAAGe,EAAGC,GAEpB,OAAOC,EAAKjB,EAAGe,EAAG,GADFC,GAAO,IAAIR,EAAK,GAEnC,EAoDL,CAKc6E,CAAa7E,GACnBH,EAAQ3E,IAAI8E,EAAMC,IAEfA,CACX,CA22BA,MAAM6E,EAAU,IAAIhF,IACpB,SAASiF,EAAS/E,GACd,IAAIC,EAAM6E,EAAQ5E,IAAIF,GAKtB,OAJKC,IACDA,EAr1BR,SAAsBD,GAQlB,SAASG,EAAOxB,EAAGC,EAAGC,GAClB,MAAMuB,EAAS,IAAIJ,EAAK,GAUxB,YATUK,IAAN1B,IACAyB,EAAO,GAAKzB,OACF0B,IAANzB,IACAwB,EAAO,GAAKxB,OACFyB,IAANxB,IACAuB,EAAO,GAAKvB,KAIjBuB,CACV,CAuID,SAASE,EAASd,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAuCD,SAASK,EAAKjB,EAAGe,EAAGG,EAAGF,GACnB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IAC1BY,CACV,CAyDD,SAASO,EAAUC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,CA6BD,SAASU,EAAQF,EAAGJ,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GACXR,CACV,CAgCD,SAASW,EAAIvB,EAAGe,GACZ,OAAQf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,EACpD,CAMD,SAASvB,EAAO4B,GACZ,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACb,OAAO3C,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAC7C,CAYD,SAAS7D,EAASP,GACd,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACb,OAAOI,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,CACnC,CAaD,SAAS5D,EAAS5B,EAAGe,GACjB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACd0E,EAAKzF,EAAE,GAAKe,EAAE,GACpB,OAAOtC,KAAKiD,KAAKG,EAAKA,EAAKC,EAAKA,EAAK2D,EAAKA,EAC7C,CAcD,SAAS1D,EAAW/B,EAAGe,GACnB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACd0E,EAAKzF,EAAE,GAAKe,EAAE,GACpB,OAAOc,EAAKA,EAAKC,EAAKA,EAAK2D,EAAKA,CACnC,CAcD,SAASzD,EAAUZ,EAAGJ,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACPa,EAAMxD,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,GAW/C,OAVIvD,EAAM,MACNrB,EAAO,GAAKY,EAAKS,EACjBrB,EAAO,GAAKa,EAAKQ,EACjBrB,EAAO,GAAK4E,EAAKvD,IAGjBrB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,GAETA,CACV,CAqBD,SAASsB,EAAKd,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACPR,CACV,CAiBD,SAASuB,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAkBD,SAASwB,EAAOpC,EAAGe,EAAGC,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CA4PD,SAASyB,EAAUrC,EAAGiC,EAAKjB,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAEhC,OADAwB,EAAUhC,EAAGY,GACNO,EAAUP,EAAQqB,EAAKrB,EACjC,CA0BD,MAAO,CACHD,SACA2B,WA5vBe3B,EA6vBfjF,IAlvBJ,SAAayD,EAAGC,EAAGC,EAAG2B,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKzB,EACZyB,EAAO,GAAKxB,EACZwB,EAAO,GAAKvB,EACLuB,CACV,EA6uBG2B,KAtuBJ,SAAcnB,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACjBR,CACV,EAiuBG4B,MA1tBJ,SAAepB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IAClBR,CACV,EAqtBG6B,MA9sBJ,SAAerB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IAClBR,CACV,EAysBG8B,MAhsBJ,SAAetB,EAAGuB,EAAM,EAAGC,EAAM,EAAG5B,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KACnCR,CACV,EA2rBGiC,IAnrBJ,SAAa7C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,EA8qBGkC,UArqBJ,SAAmB9C,EAAGe,EAAGgC,EAAO/B,GAC5B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EACnBnC,CACV,EAgqBGoC,MAzpBJ,SAAehD,EAAGe,GACd,MAAMkC,EAAKjD,EAAE,GACPkD,EAAKlD,EAAE,GACP0F,EAAK1F,EAAE,GACPmD,EAAKpC,EAAE,GACPqC,EAAKrC,EAAE,GACP4E,EAAK5E,EAAE,GAGPsC,EAFO5E,KAAKiD,KAAKuB,EAAKA,EAAKC,EAAKA,EAAKwC,EAAKA,GACnCjH,KAAKiD,KAAKyB,EAAKA,EAAKC,EAAKA,EAAKuC,EAAKA,GAE1CrC,EAASD,GAAO9B,EAAIvB,EAAGe,GAAKsC,EAClC,OAAO5E,KAAK8E,KAAKD,EACpB,EA8oBGxC,WACA0C,IAznBQ1C,EA0nBR2C,oBAnnBJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,CAC/B,EAgnBGuD,OAzmBJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,EACvD,EAwmBGE,OACA2C,MA7kBJ,SAAe5D,EAAGe,EAAGG,EAAGF,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IAC7BY,CACV,EAwkBGgC,IA9jBJ,SAAa5C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IACtBH,CACV,EAyjBG+B,IA/iBJ,SAAa3C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IACtBH,CACV,EA0iBGO,YACA4B,MArhBU5B,EAshBV0C,UA9gBJ,SAAmBzC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,EAygBGU,UACAwC,OAtfWxC,EAufXyC,MA9eJ,SAAe/D,EAAGe,EAAGC,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BoF,EAAK5F,EAAE,GAAKe,EAAE,GAAKf,EAAE,GAAKe,EAAE,GAC5B8E,EAAK7F,EAAE,GAAKe,EAAE,GAAKf,EAAE,GAAKe,EAAE,GAIlC,OAHAH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKf,EAAE,GAAKe,EAAE,GACnCH,EAAO,GAAKgF,EACZhF,EAAO,GAAKiF,EACLjF,CACV,EAueGW,MACA/B,SACAyC,IA9cQzC,EA+cRmC,WACAqC,MA/bUrC,EAgcVC,WACAqC,KA9aSrC,EA+aTG,aACAmC,OA7ZWnC,EA8ZXC,YACAmC,OAhYJ,SAAgB/C,EAAGJ,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACRR,CACV,EA2XGsB,OACAkC,MAtWUlC,EAuWVC,WACAkC,IAhVQlC,EAiVRC,SACAkC,IA1TQlC,EA2TRmC,OApTJ,SAAgBxB,EAAQ,EAAG/B,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BwC,EAAwB,EAAhBvE,KAAK8F,SAAe9F,KAAKC,GACjCW,EAAoB,EAAhBZ,KAAK8F,SAAe,EACxBuB,EAASrH,KAAKiD,KAAK,EAAIrC,EAAIA,GAAK0D,EAItC,OAHAnC,EAAO,GAAKnC,KAAKK,IAAIkE,GAAS8C,EAC9BlF,EAAO,GAAKnC,KAAKG,IAAIoE,GAAS8C,EAC9BlF,EAAO,GAAKvB,EAAI0D,EACTnC,CACV,EA4SG4D,KAtSJ,SAAcxD,GACV,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACLA,CACV,EAiSG6D,cAzRJ,SAAuBrD,EAAGsD,EAAG1D,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BrB,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GACN2E,EAAKrB,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,IAAMrF,EAAIqF,EAAE,KAAQ,EAIvD,OAHA9D,EAAO,IAAM8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,KAAOqB,EACvDnF,EAAO,IAAM8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,KAAOqB,EACvDnF,EAAO,IAAM8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,IAAMrF,EAAIqF,EAAE,KAAOqB,EACjDnF,CACV,EAgRGoF,sBAxQJ,SAA+B5E,EAAGsD,EAAG1D,GACjC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GAIb,OAHAR,EAAO,GAAKY,EAAKkD,EAAE,GAAajD,EAAKiD,EAAE,GAAac,EAAKd,EAAE,GAC3D9D,EAAO,GAAKY,EAAKkD,EAAE,GAAajD,EAAKiD,EAAE,GAAac,EAAKd,EAAE,GAC3D9D,EAAO,GAAKY,EAAKkD,EAAE,GAAajD,EAAKiD,EAAE,GAAac,EAAKd,EAAE,IACpD9D,CACV,EAgQG+D,cAvPJ,SAAuBvD,EAAGsD,EAAG1D,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BrB,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GAIZ,OAHAR,EAAO,GAAKzB,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,GACxC9D,EAAO,GAAKzB,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,GACxC9D,EAAO,GAAKzB,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,IACjC9D,CACV,EA+OGqF,cAvOJ,SAAuB7E,EAAG8E,EAAGlF,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1B2F,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAY,EAAPJ,EAAE,GACP/G,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GACNmF,EAAMH,EAAK/G,EAAIgH,EAAKjH,EACpBoH,EAAMH,EAAKlH,EAAIgH,EAAK9G,EACpBoH,EAAMN,EAAK/G,EAAIgH,EAAKjH,EAI1B,OAHAyB,EAAO,GAAKzB,EAAIoH,EAAMD,EAA6B,GAAvBF,EAAKK,EAAMJ,EAAKG,GAC5C5F,EAAO,GAAKxB,EAAIoH,EAAMF,EAA6B,GAAvBD,EAAKE,EAAMJ,EAAKM,GAC5C7F,EAAO,GAAKvB,EAAIoH,EAAMH,EAA6B,GAAvBH,EAAKK,EAAMJ,EAAKG,GACrC3F,CACV,EAwNG8F,eAhNJ,SAAwBhC,EAAG1D,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAI,EAAO,GAAK8D,EAAE,IACd9D,EAAO,GAAK8D,EAAE,IACd9D,EAAO,GAAK8D,EAAE,IACP9D,CACV,EA2MG+F,QApMJ,SAAiBjC,EAAGkC,EAAM5F,GACtB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BqG,EAAa,EAAPD,EAIZ,OAHAhG,EAAO,GAAK8D,EAAEmC,EAAM,GACpBjG,EAAO,GAAK8D,EAAEmC,EAAM,GACpBjG,EAAO,GAAK8D,EAAEmC,EAAM,GACbjG,CACV,EA8LGkG,WAxLJ,SAAoBpC,EAAG1D,GACnB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BuG,EAAKrC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPwC,EAAKxC,EAAE,GACPyC,EAAKzC,EAAE,GACP0C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,IAIb,OAHA9D,EAAO,GAAKnC,KAAKiD,KAAKqF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CrG,EAAO,GAAKnC,KAAKiD,KAAKwF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CxG,EAAO,GAAKnC,KAAKiD,KAAK2F,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACxC3G,CACV,EA0KG4G,QAhKJ,SAAiBxH,EAAGe,EAAG8D,EAAK7D,GACxB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BiH,EAAI,GACJC,EAAI,GAaV,OAXAD,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAEhB2G,EAAE,GAAKD,EAAE,GACTC,EAAE,GAAKD,EAAE,GAAKhJ,KAAKK,IAAI+F,GAAO4C,EAAE,GAAKhJ,KAAKG,IAAIiG,GAC9C6C,EAAE,GAAKD,EAAE,GAAKhJ,KAAKG,IAAIiG,GAAO4C,EAAE,GAAKhJ,KAAKK,IAAI+F,GAE9CjE,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACdH,CACV,EAgJG+G,QAtIJ,SAAiB3H,EAAGe,EAAG8D,EAAK7D,GACxB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BiH,EAAI,GACJC,EAAI,GAaV,OAXAD,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAEhB2G,EAAE,GAAKD,EAAE,GAAKhJ,KAAKG,IAAIiG,GAAO4C,EAAE,GAAKhJ,KAAKK,IAAI+F,GAC9C6C,EAAE,GAAKD,EAAE,GACTC,EAAE,GAAKD,EAAE,GAAKhJ,KAAKK,IAAI+F,GAAO4C,EAAE,GAAKhJ,KAAKG,IAAIiG,GAE9CjE,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACdH,CACV,EAsHGgH,QA5GJ,SAAiB5H,EAAGe,EAAG8D,EAAK7D,GACxB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BiH,EAAI,GACJC,EAAI,GAaV,OAXAD,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAChB0G,EAAE,GAAKzH,EAAE,GAAKe,EAAE,GAEhB2G,EAAE,GAAKD,EAAE,GAAKhJ,KAAKK,IAAI+F,GAAO4C,EAAE,GAAKhJ,KAAKG,IAAIiG,GAC9C6C,EAAE,GAAKD,EAAE,GAAKhJ,KAAKG,IAAIiG,GAAO4C,EAAE,GAAKhJ,KAAKK,IAAI+F,GAC9C6C,EAAE,GAAKD,EAAE,GAET7G,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACrBH,EAAO,GAAK8G,EAAE,GAAK3G,EAAE,GACdH,CACV,EA4FGyB,YACA6C,SAzEJ,SAAkBlF,EAAGmF,EAAQnE,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAChC,OAAIhB,EAAOQ,GAAKmF,EACL9C,EAAUrC,EAAGmF,EAAQvE,GAEzBsB,EAAKlC,EAAGY,EAClB,EAoEGwE,SA5DJ,SAAkBpF,EAAGe,EAAGC,GAEpB,OAAOC,EAAKjB,EAAGe,EAAG,GADFC,GAAO,IAAIR,EAAK,GAEnC,EA2DL,CAKcqH,CAAarH,GACnB8E,EAAQ5J,IAAI8E,EAAMC,IAEfA,CACX,CAkvBA,MAAMqH,EAAU,IAAIxH,IACpB,SAASyH,EAASvH,GACd,IAAIC,EAAMqH,EAAQpH,IAAIF,GAKtB,OAJKC,IACDA,EA5tBR,SAAsBD,GAClB,MAAMwH,EAAOzH,EAASC,GAChByH,EAAO1C,EAAS/E,GAiLtB,SAAS0B,EAAKwC,EAAG1D,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,IACR9D,CACV,CAiDD,SAASsH,EAASlH,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACNA,CACV,CAmDD,SAASU,EAAQoD,EAAG1D,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B2H,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRkE,EAAMD,EAAMJ,EAAMC,EAAME,EACxBG,GAAOF,EAAML,EAAME,EAAMC,EACzBK,EAAMJ,EAAMJ,EAAMC,EAAME,EACxBM,EAAS,GAAKZ,EAAMS,EAAMR,EAAMS,EAAMR,EAAMS,GAUlD,OATAlI,EAAO,GAAKgI,EAAMG,EAClBnI,EAAO,KAAO+H,EAAMP,EAAMC,EAAMK,GAAOK,EACvCnI,EAAO,IAAM4H,EAAMJ,EAAMC,EAAME,GAAOQ,EACtCnI,EAAO,GAAKiI,EAAME,EAClBnI,EAAO,IAAM+H,EAAMR,EAAME,EAAMI,GAAOM,EACtCnI,EAAO,KAAO4H,EAAML,EAAME,EAAMC,GAAOS,EACvCnI,EAAO,GAAKkI,EAAMC,EAClBnI,EAAO,KAAO8H,EAAMP,EAAMC,EAAMK,GAAOM,EACvCnI,EAAO,KAAO2H,EAAMJ,EAAMC,EAAME,GAAOS,EAChCnI,CACV,CAkCD,SAASuB,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BwI,EAAMhJ,EAAE,GACRiJ,EAAMjJ,EAAE,GACRkJ,EAAMlJ,EAAE,GACRmJ,EAAMnJ,EAAE,GACRoJ,EAAMpJ,EAAE,GACRqJ,EAAMrJ,EAAE,GACRsJ,EAAMtJ,EAAE,GACRuJ,EAAMvJ,EAAE,GACRwJ,EAAMxJ,EAAE,IACRyJ,EAAM1I,EAAE,GACR6H,EAAM7H,EAAE,GACR2I,EAAM3I,EAAE,GACR4I,EAAM5I,EAAE,GACR8H,EAAM9H,EAAE,GACR6I,EAAM7I,EAAE,GACR8I,EAAM9I,EAAE,GACR+H,EAAM/H,EAAE,GACR+I,EAAM/I,EAAE,IAUd,OATAH,EAAO,GAAKoI,EAAMS,EAAMN,EAAMP,EAAMU,EAAMI,EAC1C9I,EAAO,GAAKqI,EAAMQ,EAAML,EAAMR,EAAMW,EAAMG,EAC1C9I,EAAO,GAAKsI,EAAMO,EAAMJ,EAAMT,EAAMY,EAAME,EAC1C9I,EAAO,GAAKoI,EAAMW,EAAMR,EAAMN,EAAMS,EAAMM,EAC1ChJ,EAAO,GAAKqI,EAAMU,EAAMP,EAAMP,EAAMU,EAAMK,EAC1ChJ,EAAO,GAAKsI,EAAMS,EAAMN,EAAMR,EAAMW,EAAMI,EAC1ChJ,EAAO,GAAKoI,EAAMa,EAAMV,EAAML,EAAMQ,EAAMQ,EAC1ClJ,EAAO,GAAKqI,EAAMY,EAAMT,EAAMN,EAAMS,EAAMO,EAC1ClJ,EAAO,IAAMsI,EAAMW,EAAMR,EAAMP,EAAMU,EAAMM,EACpClJ,CACV,CA+SD,MAAO,CACHwD,MAjfUlC,EAkfVvB,OA/pBJ,SAAgBa,EAAIC,EAAI+D,EAAIuE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC5C,MAAMxJ,EAAS,IAAIJ,EAAK,IAgCxB,OA9BAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,OACFC,IAAPW,IACAZ,EAAO,GAAKY,OACDX,IAAPY,IACAb,EAAO,GAAKa,OACDZ,IAAP2E,IACA5E,EAAO,GAAK4E,OACD3E,IAAPkJ,IACAnJ,EAAO,GAAKmJ,OACDlJ,IAAPmJ,IACApJ,EAAO,GAAKoJ,OACDnJ,IAAPoJ,IACArJ,EAAO,GAAKqJ,OACDpJ,IAAPqJ,IACAtJ,EAAO,GAAKsJ,OACDrJ,IAAPsJ,IACAvJ,EAAO,GAAKuJ,OACDtJ,IAAPuJ,IACAxJ,EAAO,IAAMwJ,WAU1CxJ,CACV,EA8nBGlF,IA7mBJ,SAAa8F,EAAIC,EAAI+D,EAAIuE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIpJ,GAC7C,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAahC,OAZAI,EAAO,GAAKY,EACZZ,EAAO,GAAKa,EACZb,EAAO,GAAK4E,EACZ5E,EAAO,GAAK,EACZA,EAAO,GAAKmJ,EACZnJ,EAAO,GAAKoJ,EACZpJ,EAAO,GAAKqJ,EACZrJ,EAAO,GAAK,EACZA,EAAO,GAAKsJ,EACZtJ,EAAO,GAAKuJ,EACZvJ,EAAO,IAAMwJ,EACbxJ,EAAO,IAAM,EACNA,CACV,EA+lBGyJ,SAxlBJ,SAAkBC,EAAItJ,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAahC,OAZAI,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK,EACZA,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK,EACZA,EAAO,GAAK0J,EAAG,GACf1J,EAAO,GAAK0J,EAAG,GACf1J,EAAO,IAAM0J,EAAG,IAChB1J,EAAO,IAAM,EACNA,CACV,EA0kBG2J,SAnkBJ,SAAkBrE,EAAGlF,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BrB,EAAI+G,EAAE,GACN9G,EAAI8G,EAAE,GACN7G,EAAI6G,EAAE,GACNH,EAAIG,EAAE,GACNsE,EAAKrL,EAAIA,EACTsL,EAAKrL,EAAIA,EACTsL,EAAKrL,EAAIA,EACT0H,EAAK5H,EAAIqL,EACTtD,EAAK9H,EAAIoL,EACTrD,EAAK/H,EAAIqL,EACTpD,EAAKhI,EAAImL,EACTlD,EAAKjI,EAAIoL,EACTlD,EAAKlI,EAAIqL,EACTC,EAAK5E,EAAIyE,EACTI,EAAK7E,EAAI0E,EACTI,EAAK9E,EAAI2E,EAaf,OAZA9J,EAAO,GAAK,EAAIuG,EAAKI,EACrB3G,EAAO,GAAKsG,EAAK2D,EACjBjK,EAAO,GAAKyG,EAAKuD,EACjBhK,EAAO,GAAK,EACZA,EAAO,GAAKsG,EAAK2D,EACjBjK,EAAO,GAAK,EAAImG,EAAKQ,EACrB3G,EAAO,GAAK0G,EAAKqD,EACjB/J,EAAO,GAAK,EACZA,EAAO,GAAKyG,EAAKuD,EACjBhK,EAAO,GAAK0G,EAAKqD,EACjB/J,EAAO,IAAM,EAAImG,EAAKI,EACtBvG,EAAO,IAAM,EACNA,CACV,EAqiBGuD,OA9hBJ,SAAgBO,EAAG1D,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,KAAO8D,EAAE,IACT9D,CACV,EAmhBGsB,OACAuB,oBAjfJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,CACjC,EAweGuD,OAjeJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IACdf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,MAAQe,EAAE,GACnB,EAwdGmH,WACA4C,UA/bJ,SAAmBpG,EAAG1D,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAChC,GAAII,IAAW8D,EAAG,CACd,IAAIxD,EAaJ,OATAA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACPA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACPA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACAN,CACV,CACD,MAAMuH,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IAUd,OATA9D,EAAO,GAAKuH,EACZvH,EAAO,GAAK0H,EACZ1H,EAAO,GAAK6H,EACZ7H,EAAO,GAAKwH,EACZxH,EAAO,GAAK2H,EACZ3H,EAAO,GAAK8H,EACZ9H,EAAO,GAAKyH,EACZzH,EAAO,GAAK4H,EACZ5H,EAAO,IAAM+H,EACN/H,CACV,EA2ZGU,UACAwC,OAlWWxC,EAmWXyJ,YAvXJ,SAAqBrG,GACjB,MAAMyD,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACd,OAAOyD,GAAOI,EAAMI,EAAMD,EAAMF,GAC5BF,GAAOF,EAAMO,EAAMD,EAAML,GACzBI,GAAOL,EAAMI,EAAMD,EAAMF,EAChC,EA2WGhE,IAtTQlC,EAuTRA,WACA6I,eA/SJ,SAAwBhL,EAAGoB,EAAGJ,GAC1B,MAAMJ,EAAUI,GAAOkH,IAYvB,OAXIlI,IAAMY,IACNA,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,IAElBY,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACdR,EAAO,IAAM,EACNA,CACV,EAkSG8F,eA1RJ,SAAwBhC,EAAG1D,GACvB,MAAMJ,EAAUI,GAAOgH,EAAKrH,SAG5B,OAFAC,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACP9D,CACV,EAsRG+F,QA/QJ,SAAiBjC,EAAGkC,EAAM5F,GACtB,MAAMJ,EAAUI,GAAOgH,EAAKrH,SACtBkG,EAAa,EAAPD,EAGZ,OAFAhG,EAAO,GAAK8D,EAAEmC,EAAM,GACpBjG,EAAO,GAAK8D,EAAEmC,EAAM,GACbjG,CACV,EA0QGqK,QAjQJ,SAAiBvG,EAAGtD,EAAGwF,EAAM5F,GACzB,MAAMJ,EAAUI,IAAQ0D,EAAIA,EAAIxC,EAAKwC,EAAG1D,GAClC6F,EAAa,EAAPD,EAGZ,OAFAhG,EAAOiG,EAAM,GAAKzF,EAAE,GACpBR,EAAOiG,EAAM,GAAKzF,EAAE,GACbR,CACV,EA4PGkG,WAtPJ,SAAoBpC,EAAG1D,GACnB,MAAMJ,EAAUI,GAAOgH,EAAKrH,SACtBoG,EAAKrC,EAAE,GACPsC,EAAKtC,EAAE,GACPwC,EAAKxC,EAAE,GACPyC,EAAKzC,EAAE,GAGb,OAFA9D,EAAO,GAAKnC,KAAKiD,KAAKqF,EAAKA,EAAKC,EAAKA,GACrCpG,EAAO,GAAKnC,KAAKiD,KAAKwF,EAAKA,EAAKC,EAAKA,GAC9BvG,CACV,EA8OGsK,aAxOJ,SAAsBxG,EAAG1D,GACrB,MAAMJ,EAAUI,GAAOiH,EAAKtH,SACtBoG,EAAKrC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPwC,EAAKxC,EAAE,GACPyC,EAAKzC,EAAE,GACP0C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,IAIb,OAHA9D,EAAO,GAAKnC,KAAKiD,KAAKqF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CrG,EAAO,GAAKnC,KAAKiD,KAAKwF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CxG,EAAO,GAAKnC,KAAKiD,KAAK2F,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACxC3G,CACV,EA0NGuK,YAnNJ,SAAqB/J,EAAGJ,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACdR,EAAO,IAAM,EACNA,CACV,EAwMGwK,UAhMJ,SAAmB1G,EAAGtD,EAAGJ,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACP+G,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IAYd,OAXIA,IAAM9D,IACNA,EAAO,GAAKuH,EACZvH,EAAO,GAAKwH,EACZxH,EAAO,GAAKyH,EACZzH,EAAO,GAAK0H,EACZ1H,EAAO,GAAK2H,EACZ3H,EAAO,GAAK4H,GAEhB5H,EAAO,GAAKuH,EAAM3G,EAAK8G,EAAM7G,EAAKgH,EAClC7H,EAAO,GAAKwH,EAAM5G,EAAK+G,EAAM9G,EAAKiH,EAClC9H,EAAO,IAAMyH,EAAM7G,EAAKgH,EAAM/G,EAAKkH,EAC5B/H,CACV,EAwKGyK,SAjKJ,SAAkBC,EAAgBtK,GAC9B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B+K,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAUnB,OATA1K,EAAO,GAAK2K,EACZ3K,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,IAAM4K,EACb5K,EAAO,GAAK2K,EACZ3K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACNA,CACV,EAoJGgE,OA5IJ,SAAgBF,EAAG4G,EAAgBtK,GAC/B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B2H,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACR6G,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAYnB,OAXA1K,EAAO,GAAK2K,EAAIpD,EAAMqD,EAAIlD,EAC1B1H,EAAO,GAAK2K,EAAInD,EAAMoD,EAAIjD,EAC1B3H,EAAO,GAAK2K,EAAIlD,EAAMmD,EAAIhD,EAC1B5H,EAAO,GAAK2K,EAAIjD,EAAMkD,EAAIrD,EAC1BvH,EAAO,GAAK2K,EAAIhD,EAAMiD,EAAIpD,EAC1BxH,EAAO,GAAK2K,EAAI/C,EAAMgD,EAAInD,EACtB3D,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAuHG6K,QA7GJ,SAAiBrK,EAAGJ,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACNA,CACV,EAkGGmC,MAvFJ,SAAe2B,EAAGtD,EAAGJ,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GAYb,OAXAR,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACfA,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAwEG8K,eAjEJ,SAAwBF,EAAGxK,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAUhC,OATAI,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACNA,CACV,EAsDG+K,aA7CJ,SAAsBjH,EAAG8G,EAAGxK,GACxB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAYhC,OAXAI,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GACdA,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAiCL,CAKcgL,CAAapL,GACnBsH,EAAQpM,IAAI8E,EAAMC,IAEfA,CACX,CAomDA,MAAMoL,EAAU,IAAIvL,IACpB,SAASwL,EAAStL,GACd,IAAIC,EAAMoL,EAAQnL,IAAIF,GAKtB,OAJKC,IACDA,EAnmDR,SAAsBD,GAClB,MAAMyH,EAAO1C,EAAS/E,GA0PtB,SAAS0B,EAAKwC,EAAG1D,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACR9D,CACV,CAQD,MAAMwD,EAAQlC,EAuDd,SAASgG,EAASlH,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,CAuED,SAASU,EAAQoD,EAAG1D,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B2H,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IACR4H,EAAO3D,EAAM0D,EACbE,EAAOH,EAAMH,EACbO,EAAOhE,EAAM6D,EACbI,EAAOL,EAAMJ,EACbU,EAAOlE,EAAMyD,EACbU,EAAOhE,EAAMqD,EACbY,EAAOvE,EAAMgE,EACbQ,EAAOT,EAAML,EACbe,EAAOzE,EAAM4D,EACbc,EAAOpE,EAAMoD,EACbiB,EAAQ3E,EAAM2D,EACdiB,EAAQzE,EAAMuD,EACdmB,EAAQzE,EAAM0D,EACdgB,EAAQjB,EAAMxD,EACd0E,EAAQ9E,EAAM6D,EACdkB,EAAQnB,EAAM3D,EACd+E,EAAQhF,EAAMI,EACd6E,EAAQ9E,EAAMF,EACdiF,EAAQrF,EAAMgE,EACdsB,EAAQvB,EAAM9D,EACdsF,EAAQvF,EAAMO,EACdiF,EAAQlF,EAAML,EACdwF,EAAQzF,EAAMI,EACdsF,EAAQvF,EAAMF,EACd0F,EAAMxB,EAAO/D,EAAMkE,EAAO/D,EAAMgE,EAAOP,GACxCI,EAAOhE,EAAMiE,EAAO9D,EAAMiE,EAAOR,GAChCvG,EAAM2G,EAAOnE,EAAMwE,EAAOlE,EAAMqE,EAAOZ,GACxCG,EAAOlE,EAAMyE,EAAOnE,EAAMoE,EAAOX,GAChCtG,EAAM2G,EAAOpE,EAAMyE,EAAOtE,EAAMyE,EAAQb,GACzCM,EAAOrE,EAAMwE,EAAOrE,EAAM0E,EAAQd,GACjC4B,EAAMpB,EAAOvE,EAAM0E,EAAOvE,EAAM0E,EAAQvE,GACzCgE,EAAOtE,EAAM2E,EAAOxE,EAAMyE,EAAQtE,GACjCsF,EAAI,GAAK7F,EAAM2F,EAAKxF,EAAM1C,EAAK6C,EAAM5C,EAAKqG,EAAM6B,GA6BtD,OA5BAnN,EAAO,GAAKoN,EAAIF,EAChBlN,EAAO,GAAKoN,EAAIpI,EAChBhF,EAAO,GAAKoN,EAAInI,EAChBjF,EAAO,GAAKoN,EAAID,EAChBnN,EAAO,GAAKoN,GAAMzB,EAAOjE,EAAMkE,EAAO/D,EAAMkE,EAAOT,GAC9CI,EAAOhE,EAAMmE,EAAOhE,EAAMiE,EAAOR,IACtCtL,EAAO,GAAKoN,GAAM1B,EAAOnE,EAAM0E,EAAOpE,EAAMqE,EAAOZ,GAC9CK,EAAOpE,EAAMyE,EAAOnE,EAAMsE,EAAOb,IACtCtL,EAAO,GAAKoN,GAAMvB,EAAOtE,EAAMyE,EAAOtE,EAAM2E,EAAQf,GAC/CM,EAAOrE,EAAM0E,EAAOvE,EAAM0E,EAAQd,IACvCtL,EAAO,GAAKoN,GAAMtB,EAAOvE,EAAM4E,EAAOzE,EAAM0E,EAAQvE,GAC/CkE,EAAOxE,EAAM2E,EAAOxE,EAAM2E,EAAQxE,IACvC7H,EAAO,GAAKoN,GAAMd,EAAQlB,EAAMqB,EAAQpB,EAAMqB,EAAQjB,GACjDc,EAAQnB,EAAMoB,EAAQnB,EAAMsB,EAAQlB,IACzCzL,EAAO,GAAKoN,GAAMb,EAAQpB,EAAMyB,EAAQvB,EAAM0B,EAAQtB,GACjDa,EAAQnB,EAAM0B,EAAQxB,EAAMyB,EAAQrB,IACzCzL,EAAO,IAAMoN,GAAMZ,EAAQrB,EAAM0B,EAAQzB,EAAM4B,EAAQvB,GAClDgB,EAAQtB,EAAMyB,EAAQxB,EAAM6B,EAAQxB,IACzCzL,EAAO,IAAMoN,GAAMT,EAAQxB,EAAM2B,EAAQ1B,EAAM6B,EAAQ5B,GAClDqB,EAAQvB,EAAM4B,EAAQ3B,EAAM4B,EAAQ3B,IACzCrL,EAAO,IAAMoN,GAAMZ,EAAQzE,EAAM4E,EAAQnB,EAAMe,EAAQ3E,GAClD8E,EAAQlB,EAAMc,EAAQ1E,EAAM6E,EAAQ1E,IACzC/H,EAAO,IAAMoN,GAAMN,EAAQtB,EAAMc,EAAQ7E,EAAMoF,EAAQ9E,GAClD6E,EAAQ7E,EAAMgF,EAAQvB,EAAMe,EAAQ9E,IACzCzH,EAAO,IAAMoN,GAAMR,EAAQhF,EAAMqF,EAAQzB,EAAMiB,EAAQhF,GAClDuF,EAAQxB,EAAMgB,EAAQ/E,EAAMoF,EAAQjF,IACzC5H,EAAO,IAAMoN,GAAMJ,EAAQjF,EAAM2E,EAAQjF,EAAMsF,EAAQnF,GAClDkF,EAAQlF,EAAMqF,EAAQlF,EAAM4E,EAAQlF,IAClCzH,CACV,CAmDD,MAAMkD,EAASxC,EAQf,SAASa,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BwI,EAAMhJ,EAAE,GACRiJ,EAAMjJ,EAAE,GACRkJ,EAAMlJ,EAAE,GACRiO,EAAMjO,EAAE,GACRmJ,EAAMnJ,EAAE,GACRoJ,EAAMpJ,EAAE,GACRqJ,EAAMrJ,EAAE,GACRkO,EAAMlO,EAAE,GACRsJ,EAAMtJ,EAAE,GACRuJ,EAAMvJ,EAAE,GACRwJ,EAAMxJ,EAAE,IACRmO,EAAMnO,EAAE,IACRoO,EAAMpO,EAAE,IACRqO,EAAMrO,EAAE,IACRsO,EAAMtO,EAAE,IACRuO,EAAMvO,EAAE,IACRyJ,EAAM1I,EAAE,GACR6H,EAAM7H,EAAE,GACR2I,EAAM3I,EAAE,GACRyN,EAAMzN,EAAE,GACR4I,EAAM5I,EAAE,GACR8H,EAAM9H,EAAE,GACR6I,EAAM7I,EAAE,GACR0N,EAAM1N,EAAE,GACR8I,EAAM9I,EAAE,GACR+H,EAAM/H,EAAE,GACR+I,EAAM/I,EAAE,IACR2N,EAAM3N,EAAE,IACR4N,EAAM5N,EAAE,IACR6N,EAAM7N,EAAE,IACR8N,EAAM9N,EAAE,IACR+N,EAAM/N,EAAE,IAiBd,OAhBAH,EAAO,GAAKoI,EAAMS,EAAMN,EAAMP,EAAMU,EAAMI,EAAM0E,EAAMI,EACtD5N,EAAO,GAAKqI,EAAMQ,EAAML,EAAMR,EAAMW,EAAMG,EAAM2E,EAAMG,EACtD5N,EAAO,GAAKsI,EAAMO,EAAMJ,EAAMT,EAAMY,EAAME,EAAM4E,EAAME,EACtD5N,EAAO,GAAKqN,EAAMxE,EAAMyE,EAAMtF,EAAMuF,EAAMzE,EAAM6E,EAAMC,EACtD5N,EAAO,GAAKoI,EAAMW,EAAMR,EAAMN,EAAMS,EAAMM,EAAMwE,EAAMK,EACtD7N,EAAO,GAAKqI,EAAMU,EAAMP,EAAMP,EAAMU,EAAMK,EAAMyE,EAAMI,EACtD7N,EAAO,GAAKsI,EAAMS,EAAMN,EAAMR,EAAMW,EAAMI,EAAM0E,EAAMG,EACtD7N,EAAO,GAAKqN,EAAMtE,EAAMuE,EAAMrF,EAAMsF,EAAMvE,EAAM2E,EAAME,EACtD7N,EAAO,GAAKoI,EAAMa,EAAMV,EAAML,EAAMQ,EAAMQ,EAAMsE,EAAMM,EACtD9N,EAAO,GAAKqI,EAAMY,EAAMT,EAAMN,EAAMS,EAAMO,EAAMuE,EAAMK,EACtD9N,EAAO,IAAMsI,EAAMW,EAAMR,EAAMP,EAAMU,EAAMM,EAAMwE,EAAMI,EACvD9N,EAAO,IAAMqN,EAAMpE,EAAMqE,EAAMpF,EAAMqF,EAAMrE,EAAMyE,EAAMG,EACvD9N,EAAO,IAAMoI,EAAM2F,EAAMxF,EAAMyF,EAAMtF,EAAMuF,EAAMT,EAAMU,EACvDlO,EAAO,IAAMqI,EAAM0F,EAAMvF,EAAMwF,EAAMrF,EAAMsF,EAAMR,EAAMS,EACvDlO,EAAO,IAAMsI,EAAMyF,EAAMtF,EAAMuF,EAAMpF,EAAMqF,EAAMP,EAAMQ,EACvDlO,EAAO,IAAMqN,EAAMU,EAAMT,EAAMU,EAAMT,EAAMU,EAAMN,EAAMO,EAChDlO,CACV,CAQD,MAAMyD,EAAMlC,EAgUN4M,EAAQ9G,EAAKtH,SACbqO,EAAQ/G,EAAKtH,SACbsO,EAAQhH,EAAKtH,SAgZnB,SAASuO,EAAatI,EAAM0E,EAAgBtK,GACxC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAChC,IAAIrB,EAAIyH,EAAK,GACTxH,EAAIwH,EAAK,GACTvH,EAAIuH,EAAK,GACb,MAAMuI,EAAI1Q,KAAKiD,KAAKvC,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GACxCF,GAAKgQ,EACL/P,GAAK+P,EACL9P,GAAK8P,EACL,MAAMpI,EAAK5H,EAAIA,EACTgI,EAAK/H,EAAIA,EACTmI,EAAKlI,EAAIA,EACTkM,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GACb8D,EAAiB,EAAI7D,EAiB3B,OAhBA3K,EAAO,GAAKmG,GAAM,EAAIA,GAAMwE,EAC5B3K,EAAO,GAAKzB,EAAIC,EAAIgQ,EAAiB/P,EAAImM,EACzC5K,EAAO,GAAKzB,EAAIE,EAAI+P,EAAiBhQ,EAAIoM,EACzC5K,EAAO,GAAK,EACZA,EAAO,GAAKzB,EAAIC,EAAIgQ,EAAiB/P,EAAImM,EACzC5K,EAAO,GAAKuG,GAAM,EAAIA,GAAMoE,EAC5B3K,EAAO,GAAKxB,EAAIC,EAAI+P,EAAiBjQ,EAAIqM,EACzC5K,EAAO,GAAK,EACZA,EAAO,GAAKzB,EAAIE,EAAI+P,EAAiBhQ,EAAIoM,EACzC5K,EAAO,GAAKxB,EAAIC,EAAI+P,EAAiBjQ,EAAIqM,EACzC5K,EAAO,IAAM2G,GAAM,EAAIA,GAAMgE,EAC7B3K,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,CAsBD,SAASyO,EAAW3K,EAAGkC,EAAM0E,EAAgBtK,GACzC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAChC,IAAIrB,EAAIyH,EAAK,GACTxH,EAAIwH,EAAK,GACTvH,EAAIuH,EAAK,GACb,MAAMuI,EAAI1Q,KAAKiD,KAAKvC,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GACxCF,GAAKgQ,EACL/P,GAAK+P,EACL9P,GAAK8P,EACL,MAAMpI,EAAK5H,EAAIA,EACTgI,EAAK/H,EAAIA,EACTmI,EAAKlI,EAAIA,EACTkM,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GACb8D,EAAiB,EAAI7D,EACrB+D,EAAMvI,GAAM,EAAIA,GAAMwE,EACtBgE,EAAMpQ,EAAIC,EAAIgQ,EAAiB/P,EAAImM,EACnCgE,EAAMrQ,EAAIE,EAAI+P,EAAiBhQ,EAAIoM,EACnCiE,EAAMtQ,EAAIC,EAAIgQ,EAAiB/P,EAAImM,EACnCkE,EAAMvI,GAAM,EAAIA,GAAMoE,EACtBoE,EAAMvQ,EAAIC,EAAI+P,EAAiBjQ,EAAIqM,EACnCoE,EAAMzQ,EAAIE,EAAI+P,EAAiBhQ,EAAIoM,EACnCqE,EAAMzQ,EAAIC,EAAI+P,EAAiBjQ,EAAIqM,EACnCsE,EAAMvI,GAAM,EAAIA,GAAMgE,EACtBpD,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IAmBd,OAlBA9D,EAAO,GAAK0O,EAAMnH,EAAMoH,EAAMjH,EAAMkH,EAAM/G,EAC1C7H,EAAO,GAAK0O,EAAMlH,EAAMmH,EAAMhH,EAAMiH,EAAM9G,EAC1C9H,EAAO,GAAK0O,EAAMjH,EAAMkH,EAAM/G,EAAMgH,EAAM7G,EAC1C/H,EAAO,GAAK0O,EAAMvD,EAAMwD,EAAMvD,EAAMwD,EAAMvD,EAC1CrL,EAAO,GAAK6O,EAAMtH,EAAMuH,EAAMpH,EAAMqH,EAAMlH,EAC1C7H,EAAO,GAAK6O,EAAMrH,EAAMsH,EAAMnH,EAAMoH,EAAMjH,EAC1C9H,EAAO,GAAK6O,EAAMpH,EAAMqH,EAAMlH,EAAMmH,EAAMhH,EAC1C/H,EAAO,GAAK6O,EAAM1D,EAAM2D,EAAM1D,EAAM2D,EAAM1D,EAC1CrL,EAAO,GAAKgP,EAAMzH,EAAM0H,EAAMvH,EAAMwH,EAAMrH,EAC1C7H,EAAO,GAAKgP,EAAMxH,EAAMyH,EAAMtH,EAAMuH,EAAMpH,EAC1C9H,EAAO,IAAMgP,EAAMvH,EAAMwH,EAAMrH,EAAMsH,EAAMnH,EAC3C/H,EAAO,IAAMgP,EAAM7D,EAAM8D,EAAM7D,EAAM8D,EAAM7D,EACvCvH,IAAM9D,IACNA,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,CAmID,MAAO,CACHD,OAz/CJ,SAAgBa,EAAIC,EAAI+D,EAAIuE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI2F,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC7E,MAAMzP,EAAS,IAAIJ,EAAK,IAiDxB,YAhDWK,IAAPW,IACAZ,EAAO,GAAKY,OACDX,IAAPY,IACAb,EAAO,GAAKa,OACDZ,IAAP2E,IACA5E,EAAO,GAAK4E,OACD3E,IAAPkJ,IACAnJ,EAAO,GAAKmJ,OACDlJ,IAAPmJ,IACApJ,EAAO,GAAKoJ,OACDnJ,IAAPoJ,IACArJ,EAAO,GAAKqJ,OACDpJ,IAAPqJ,IACAtJ,EAAO,GAAKsJ,OACDrJ,IAAPsJ,IACAvJ,EAAO,GAAKuJ,OACDtJ,IAAPuJ,IACAxJ,EAAO,GAAKwJ,OACDvJ,IAAPkP,IACAnP,EAAO,GAAKmP,OACAlP,IAARmP,IACApP,EAAO,IAAMoP,OACDnP,IAARoP,IACArP,EAAO,IAAMqP,OACDpP,IAARqP,IACAtP,EAAO,IAAMsP,OACDrP,IAARsP,IACAvP,EAAO,IAAMuP,OACDtP,IAARuP,IACAxP,EAAO,IAAMwP,OACDvP,IAARwP,IACAzP,EAAO,IAAMyP,kBAiBtEzP,CACV,EAu8CGlF,IA/6CJ,SAAa8F,EAAIC,EAAI+D,EAAIuE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI2F,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKrP,GAC/E,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAKY,EACZZ,EAAO,GAAKa,EACZb,EAAO,GAAK4E,EACZ5E,EAAO,GAAKmJ,EACZnJ,EAAO,GAAKoJ,EACZpJ,EAAO,GAAKqJ,EACZrJ,EAAO,GAAKsJ,EACZtJ,EAAO,GAAKuJ,EACZvJ,EAAO,GAAKwJ,EACZxJ,EAAO,GAAKmP,EACZnP,EAAO,IAAMoP,EACbpP,EAAO,IAAMqP,EACbrP,EAAO,IAAMsP,EACbtP,EAAO,IAAMuP,EACbvP,EAAO,IAAMwP,EACbxP,EAAO,IAAMyP,EACNzP,CACV,EA65CG0P,SAt5CJ,SAAkBC,EAAIvP,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK,EACZA,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK,EACZA,EAAO,GAAK2P,EAAG,GACf3P,EAAO,GAAK2P,EAAG,GACf3P,EAAO,IAAM2P,EAAG,IAChB3P,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EAo4CG2J,SA73CJ,SAAkBrE,EAAGlF,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BrB,EAAI+G,EAAE,GACN9G,EAAI8G,EAAE,GACN7G,EAAI6G,EAAE,GACNH,EAAIG,EAAE,GACNsE,EAAKrL,EAAIA,EACTsL,EAAKrL,EAAIA,EACTsL,EAAKrL,EAAIA,EACT0H,EAAK5H,EAAIqL,EACTtD,EAAK9H,EAAIoL,EACTrD,EAAK/H,EAAIqL,EACTpD,EAAKhI,EAAImL,EACTlD,EAAKjI,EAAIoL,EACTlD,EAAKlI,EAAIqL,EACTC,EAAK5E,EAAIyE,EACTI,EAAK7E,EAAI0E,EACTI,EAAK9E,EAAI2E,EAiBf,OAhBA9J,EAAO,GAAK,EAAIuG,EAAKI,EACrB3G,EAAO,GAAKsG,EAAK2D,EACjBjK,EAAO,GAAKyG,EAAKuD,EACjBhK,EAAO,GAAK,EACZA,EAAO,GAAKsG,EAAK2D,EACjBjK,EAAO,GAAK,EAAImG,EAAKQ,EACrB3G,EAAO,GAAK0G,EAAKqD,EACjB/J,EAAO,GAAK,EACZA,EAAO,GAAKyG,EAAKuD,EACjBhK,EAAO,GAAK0G,EAAKqD,EACjB/J,EAAO,IAAM,EAAImG,EAAKI,EACtBvG,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EA21CGuD,OAp1CJ,SAAgBO,EAAG1D,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,IAAM8D,EAAE,GACf9D,EAAO,KAAO8D,EAAE,IAChB9D,EAAO,KAAO8D,EAAE,IAChB9D,EAAO,KAAO8D,EAAE,IAChB9D,EAAO,KAAO8D,EAAE,IAChB9D,EAAO,KAAO8D,EAAE,IAChB9D,EAAO,KAAO8D,EAAE,IACT9D,CACV,EAk0CGsB,OACAkC,QACAX,oBA1xCJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,GAC1B3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,GAC1B3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,GAC1B3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,GAC1B3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,GAC1B3B,KAAKiF,IAAI1D,EAAE,IAAMe,EAAE,KAAOX,CACjC,EA0wCGuD,OAnwCJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IACdf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,KAAOe,EAAE,IACXf,EAAE,MAAQe,EAAE,KACZf,EAAE,MAAQe,EAAE,KACZf,EAAE,MAAQe,EAAE,KACZf,EAAE,MAAQe,EAAE,KACZf,EAAE,MAAQe,EAAE,KACZf,EAAE,MAAQe,EAAE,GACnB,EAmvCGmH,WACA4C,UAntCJ,SAAmBpG,EAAG1D,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAChC,GAAII,IAAW8D,EAAG,CACd,IAAIxD,EAmBJ,OAlBAA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACPA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACPA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,IACTA,EAAE,IAAMxD,EACRA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAKxD,EACPA,EAAIwD,EAAE,GACNA,EAAE,GAAKA,EAAE,IACTA,EAAE,IAAMxD,EACRA,EAAIwD,EAAE,IACNA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMxD,EACDN,CACV,CACD,MAAMuH,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IAiBd,OAhBA9D,EAAO,GAAKuH,EACZvH,EAAO,GAAK0H,EACZ1H,EAAO,GAAK6H,EACZ7H,EAAO,GAAKsL,EACZtL,EAAO,GAAKwH,EACZxH,EAAO,GAAK2H,EACZ3H,EAAO,GAAK8H,EACZ9H,EAAO,GAAKuL,EACZvL,EAAO,GAAKyH,EACZzH,EAAO,GAAK4H,EACZ5H,EAAO,IAAM+H,EACb/H,EAAO,IAAMwL,EACbxL,EAAO,IAAMmL,EACbnL,EAAO,IAAMoL,EACbpL,EAAO,IAAMqL,EACbrL,EAAO,IAAMyL,EACNzL,CACV,EA2pCGU,UACAyJ,YA/jCJ,SAAqBrG,GACjB,MAAMyD,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IACR4H,EAAO3D,EAAM0D,EACbE,EAAOH,EAAMH,EACbO,EAAOhE,EAAM6D,EACbI,EAAOL,EAAMJ,EACbU,EAAOlE,EAAMyD,EACbU,EAAOhE,EAAMqD,EACbY,EAAOvE,EAAMgE,EACbQ,EAAOT,EAAML,EACbe,EAAOzE,EAAM4D,EACbc,EAAOpE,EAAMoD,EACbiB,EAAQ3E,EAAM2D,EACdiB,EAAQzE,EAAMuD,EASpB,OAAO5D,GARKmE,EAAO/D,EAAMkE,EAAO/D,EAAMgE,EAAOP,GACxCI,EAAOhE,EAAMiE,EAAO9D,EAAMiE,EAAOR,IAOpB7D,GANNiE,EAAOnE,EAAMwE,EAAOlE,EAAMqE,EAAOZ,GACxCG,EAAOlE,EAAMyE,EAAOnE,EAAMoE,EAAOX,IAKT1D,GAJjB+D,EAAOpE,EAAMyE,EAAOtE,EAAMyE,EAAQb,GACzCM,EAAOrE,EAAMwE,EAAOrE,EAAM0E,EAAQd,IAGCD,GAF5BS,EAAOvE,EAAM0E,EAAOvE,EAAM0E,EAAQvE,GACzCgE,EAAOtE,EAAM2E,EAAOxE,EAAMyE,EAAQtE,GAE1C,EA0hCG5E,SACA3B,WACAkC,MACA2G,eA18BJ,SAAwBhL,EAAGoB,EAAGJ,GAC1B,MAAMJ,EAAUI,GAAOkH,IAmBvB,OAlBIlI,IAAMY,IACNA,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,GAAKZ,EAAE,GACdY,EAAO,IAAMZ,EAAE,IACfY,EAAO,IAAMZ,EAAE,KAEnBY,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAM,EACNA,CACV,EAs7BG8F,eA96BJ,SAAwBhC,EAAG1D,GACvB,MAAMJ,EAAUI,GAAOiH,EAAKtH,SAI5B,OAHAC,EAAO,GAAK8D,EAAE,IACd9D,EAAO,GAAK8D,EAAE,IACd9D,EAAO,GAAK8D,EAAE,IACP9D,CACV,EAy6BG+F,QAl6BJ,SAAiBjC,EAAGkC,EAAM5F,GACtB,MAAMJ,EAAUI,GAAOiH,EAAKtH,SACtBkG,EAAa,EAAPD,EAIZ,OAHAhG,EAAO,GAAK8D,EAAEmC,EAAM,GACpBjG,EAAO,GAAK8D,EAAEmC,EAAM,GACpBjG,EAAO,GAAK8D,EAAEmC,EAAM,GACbjG,CACV,EA45BGqK,QAn5BJ,SAAiBvG,EAAGtD,EAAGwF,EAAM5F,GACzB,MAAMJ,EAAUI,IAAQ0D,EAAK1D,EAAMkB,EAAKwC,EAAG1D,GACrC6F,EAAa,EAAPD,EAIZ,OAHAhG,EAAOiG,EAAM,GAAKzF,EAAE,GACpBR,EAAOiG,EAAM,GAAKzF,EAAE,GACpBR,EAAOiG,EAAM,GAAKzF,EAAE,GACbR,CACV,EA64BGkG,WAv4BJ,SAAoBpC,EAAG1D,GACnB,MAAMJ,EAAUI,GAAOiH,EAAKtH,SACtBoG,EAAKrC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPwC,EAAKxC,EAAE,GACPyC,EAAKzC,EAAE,GACP0C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,IAIb,OAHA9D,EAAO,GAAKnC,KAAKiD,KAAKqF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CrG,EAAO,GAAKnC,KAAKiD,KAAKwF,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAC/CxG,EAAO,GAAKnC,KAAKiD,KAAK2F,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACxC3G,CACV,EAy3BG4P,YA/1BJ,SAAqBC,EAAuBC,EAAQC,EAAOC,EAAM5P,GAC7D,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BqQ,EAAIpS,KAAKqS,IAAc,GAAVrS,KAAKC,GAAW,GAAM+R,GAezC,GAdA7P,EAAO,GAAKiQ,EAAIH,EAChB9P,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKiQ,EACZjQ,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,KAAO,EACdA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACTmQ,OAAOC,SAASJ,GAAO,CACvB,MAAMK,EAAW,GAAKN,EAAQC,GAC9BhQ,EAAO,IAAMgQ,EAAOK,EACpBrQ,EAAO,IAAMgQ,EAAOD,EAAQM,CAC/B,MAEGrQ,EAAO,KAAO,EACdA,EAAO,KAAO+P,EAElB,OAAO/P,CACV,EAq0BGsQ,oBAhzBA,SAA6BT,EAAuBC,EAAQC,EAAOC,EAAOO,IAAUnQ,GACpF,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BqQ,EAAI,EAAIpS,KAAKqS,IAA4B,GAAxBL,GAevB,GAdA7P,EAAO,GAAKiQ,EAAIH,EAChB9P,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKiQ,EACZjQ,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,KAAO,EACdA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACTgQ,IAASO,IACTvQ,EAAO,IAAM,EACbA,EAAO,IAAM+P,MAEZ,CACD,MAAMM,EAAW,GAAKL,EAAOD,GAC7B/P,EAAO,IAAM+P,EAAQM,EACrBrQ,EAAO,IAAMgQ,EAAOD,EAAQM,CAC/B,CACD,OAAOrQ,CACV,EAsxBGwQ,MAtwBJ,SAAeC,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,EAAK1Q,GAChD,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK,GAAK0Q,EAAQD,GACzBzQ,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,GAAK4Q,EAAMD,GACvB3Q,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,GAAK6Q,EAAOC,GACzB9Q,EAAO,IAAM,EACbA,EAAO,KAAO0Q,EAAQD,IAASA,EAAOC,GACtC1Q,EAAO,KAAO4Q,EAAMD,IAAWA,EAASC,GACxC5Q,EAAO,IAAM6Q,GAAQA,EAAOC,GAC5B9Q,EAAO,IAAM,EACNA,CACV,EAovBG+Q,QAjuBJ,SAAiBN,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,EAAK1Q,GAClD,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BqB,EAAMyP,EAAQD,EACdvP,EAAM0P,EAAMD,EACZ9L,EAAMgM,EAAOC,EAiBnB,OAhBA9Q,EAAO,GAAK,EAAI6Q,EAAO5P,EACvBjB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EAAI6Q,EAAO3P,EACvBlB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAMyQ,EAAOC,GAASzP,EAC7BjB,EAAO,IAAM4Q,EAAMD,GAAUzP,EAC7BlB,EAAO,IAAM8Q,EAAMjM,EACnB7E,EAAO,KAAO,EACdA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM6Q,EAAOC,EAAMjM,EAC1B7E,EAAO,IAAM,EACNA,CACV,EA4sBGgR,gBAzrBJ,SAAyBP,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,EAAMP,IAAUnQ,GACrE,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BqB,EAAMyP,EAAQD,EACdvP,EAAM0P,EAAMD,EAelB,GAdA3Q,EAAO,GAAK,EAAI6Q,EAAO5P,EACvBjB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EAAI6Q,EAAO3P,EACvBlB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAMyQ,EAAOC,GAASzP,EAC7BjB,EAAO,IAAM4Q,EAAMD,GAAUzP,EAC7BlB,EAAO,KAAO,EACdA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACT8Q,IAAQP,IACRvQ,EAAO,IAAM,EACbA,EAAO,IAAM6Q,MAEZ,CACD,MAAMR,EAAW,GAAKS,EAAMD,GAC5B7Q,EAAO,IAAM6Q,EAAOR,EACpBrQ,EAAO,IAAM8Q,EAAMD,EAAOR,CAC7B,CACD,OAAOrQ,CACV,EA8pBGiR,IA5oBJ,SAAapX,EAAUqX,EAAQC,EAAI/Q,GAC/B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAoBhC,OAnBAyH,EAAKjG,UAAUiG,EAAKnH,SAASgR,EAAQrX,EAAUwU,GAAQA,GACvDhH,EAAKjG,UAAUiG,EAAKlE,MAAMgO,EAAI9C,EAAOF,GAAQA,GAC7C9G,EAAKjG,UAAUiG,EAAKlE,MAAMkL,EAAOF,EAAOC,GAAQA,GAChDpO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAK,EACZA,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAK,EACZA,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,IAAMqO,EAAM,GACnBrO,EAAO,IAAM,EACbA,EAAO,IAAMnG,EAAS,GACtBmG,EAAO,IAAMnG,EAAS,GACtBmG,EAAO,IAAMnG,EAAS,GACtBmG,EAAO,IAAM,EACNA,CACV,EAunBGoR,UAxmBJ,SAAmBC,EAAKH,EAAQC,EAAI/Q,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAoBhC,OAnBAyH,EAAKjG,UAAUiG,EAAKnH,SAASmR,EAAKH,EAAQ7C,GAAQA,GAClDhH,EAAKjG,UAAUiG,EAAKlE,MAAMgO,EAAI9C,EAAOF,GAAQA,GAC7C9G,EAAKjG,UAAUiG,EAAKlE,MAAMkL,EAAOF,EAAOC,GAAQA,GAChDpO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAK,EACZA,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAK,EACZA,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,IAAMqO,EAAM,GACnBrO,EAAO,IAAM,EACbA,EAAO,IAAMqR,EAAI,GACjBrR,EAAO,IAAMqR,EAAI,GACjBrR,EAAO,IAAMqR,EAAI,GACjBrR,EAAO,IAAM,EACNA,CACV,EAmlBGsR,OAtkBJ,SAAgBD,EAAKH,EAAQC,EAAI/Q,GAC7B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAoBhC,OAnBAyH,EAAKjG,UAAUiG,EAAKnH,SAASmR,EAAKH,EAAQ7C,GAAQA,GAClDhH,EAAKjG,UAAUiG,EAAKlE,MAAMgO,EAAI9C,EAAOF,GAAQA,GAC7C9G,EAAKjG,UAAUiG,EAAKlE,MAAMkL,EAAOF,EAAOC,GAAQA,GAChDpO,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,GAAK,EACZA,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,GAAKqO,EAAM,GAClBrO,EAAO,GAAK,EACZA,EAAO,GAAKmO,EAAM,GAClBnO,EAAO,GAAKoO,EAAM,GAClBpO,EAAO,IAAMqO,EAAM,GACnBrO,EAAO,IAAM,EACbA,EAAO,MAAQmO,EAAM,GAAKkD,EAAI,GAAKlD,EAAM,GAAKkD,EAAI,GAAKlD,EAAM,GAAKkD,EAAI,IACtErR,EAAO,MAAQoO,EAAM,GAAKiD,EAAI,GAAKjD,EAAM,GAAKiD,EAAI,GAAKjD,EAAM,GAAKiD,EAAI,IACtErR,EAAO,MAAQqO,EAAM,GAAKgD,EAAI,GAAKhD,EAAM,GAAKgD,EAAI,GAAKhD,EAAM,GAAKgD,EAAI,IACtErR,EAAO,IAAM,EACNA,CACV,EAijBGuK,YAziBJ,SAAqB/J,EAAGJ,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAM,EACNA,CACV,EAuhBGwK,UA9gBJ,SAAmB1G,EAAGtD,EAAGJ,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP+G,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACRwH,EAAMxH,EAAE,IACRyH,EAAMzH,EAAE,IACR0H,EAAM1H,EAAE,IACR2H,EAAM3H,EAAE,IAmBd,OAlBIA,IAAM9D,IACNA,EAAO,GAAKuH,EACZvH,EAAO,GAAKwH,EACZxH,EAAO,GAAKyH,EACZzH,EAAO,GAAKmL,EACZnL,EAAO,GAAK0H,EACZ1H,EAAO,GAAK2H,EACZ3H,EAAO,GAAK4H,EACZ5H,EAAO,GAAKoL,EACZpL,EAAO,GAAK6H,EACZ7H,EAAO,GAAK8H,EACZ9H,EAAO,IAAM+H,EACb/H,EAAO,IAAMqL,GAEjBrL,EAAO,IAAMuH,EAAM3G,EAAK8G,EAAM7G,EAAKgH,EAAMjD,EAAK0G,EAC9CtL,EAAO,IAAMwH,EAAM5G,EAAK+G,EAAM9G,EAAKiH,EAAMlD,EAAK2G,EAC9CvL,EAAO,IAAMyH,EAAM7G,EAAKgH,EAAM/G,EAAKkH,EAAMnD,EAAK4G,EAC9CxL,EAAO,IAAMmL,EAAMvK,EAAKwK,EAAMvK,EAAKwK,EAAMzG,EAAK6G,EACvCzL,CACV,EAueGuR,UAheJ,SAAmB7G,EAAgBtK,GAC/B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B+K,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAiBnB,OAhBA1K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK2K,EACZ3K,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM4K,EACb5K,EAAO,IAAM2K,EACb3K,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EA4cG4G,QAncJ,SAAiB9C,EAAG4G,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B8H,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACR6G,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAmBnB,OAlBA1K,EAAO,GAAK2K,EAAIjD,EAAMkD,EAAI/C,EAC1B7H,EAAO,GAAK2K,EAAIhD,EAAMiD,EAAI9C,EAC1B9H,EAAO,GAAK2K,EAAI/C,EAAMgD,EAAI7C,EAC1B/H,EAAO,GAAK2K,EAAIS,EAAMR,EAAIS,EAC1BrL,EAAO,GAAK2K,EAAI9C,EAAM+C,EAAIlD,EAC1B1H,EAAO,GAAK2K,EAAI7C,EAAM8C,EAAIjD,EAC1B3H,EAAO,IAAM2K,EAAI5C,EAAM6C,EAAIhD,EAC3B5H,EAAO,IAAM2K,EAAIU,EAAMT,EAAIQ,EACvBtH,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAqaGwR,UA9ZJ,SAAmB9G,EAAgBtK,GAC/B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B+K,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAiBnB,OAhBA1K,EAAO,GAAK2K,EACZ3K,EAAO,GAAK,EACZA,EAAO,IAAM4K,EACb5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,IAAM2K,EACb3K,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EA0YG+G,QAjYJ,SAAiBjD,EAAG4G,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B2H,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR+D,EAAM/D,EAAE,GACRgE,EAAMhE,EAAE,GACRiE,EAAMjE,EAAE,IACRuH,EAAMvH,EAAE,IACR6G,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAmBnB,OAlBA1K,EAAO,GAAK2K,EAAIpD,EAAMqD,EAAI/C,EAC1B7H,EAAO,GAAK2K,EAAInD,EAAMoD,EAAI9C,EAC1B9H,EAAO,GAAK2K,EAAIlD,EAAMmD,EAAI7C,EAC1B/H,EAAO,GAAK2K,EAAIQ,EAAMP,EAAIS,EAC1BrL,EAAO,GAAK2K,EAAI9C,EAAM+C,EAAIrD,EAC1BvH,EAAO,GAAK2K,EAAI7C,EAAM8C,EAAIpD,EAC1BxH,EAAO,IAAM2K,EAAI5C,EAAM6C,EAAInD,EAC3BzH,EAAO,IAAM2K,EAAIU,EAAMT,EAAIO,EACvBrH,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAmWGyR,UA5VJ,SAAmB/G,EAAgBtK,GAC/B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B+K,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAiBnB,OAhBA1K,EAAO,GAAK2K,EACZ3K,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM4K,EACb5K,EAAO,GAAK2K,EACZ3K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EAwUGgH,QA/TJ,SAAiBlD,EAAG4G,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1B2H,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GACRqH,EAAMrH,EAAE,GACR4D,EAAM5D,EAAE,GACR6D,EAAM7D,EAAE,GACR8D,EAAM9D,EAAE,GACRsH,EAAMtH,EAAE,GACR6G,EAAI9M,KAAKK,IAAIwM,GACbE,EAAI/M,KAAKG,IAAI0M,GAmBnB,OAlBA1K,EAAO,GAAK2K,EAAIpD,EAAMqD,EAAIlD,EAC1B1H,EAAO,GAAK2K,EAAInD,EAAMoD,EAAIjD,EAC1B3H,EAAO,GAAK2K,EAAIlD,EAAMmD,EAAIhD,EAC1B5H,EAAO,GAAK2K,EAAIQ,EAAMP,EAAIQ,EAC1BpL,EAAO,GAAK2K,EAAIjD,EAAMkD,EAAIrD,EAC1BvH,EAAO,GAAK2K,EAAIhD,EAAMiD,EAAIpD,EAC1BxH,EAAO,GAAK2K,EAAI/C,EAAMgD,EAAInD,EAC1BzH,EAAO,GAAK2K,EAAIS,EAAMR,EAAIO,EACtBrH,IAAM9D,IACNA,EAAO,GAAK8D,EAAE,GACd9D,EAAO,GAAK8D,EAAE,GACd9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAiSGsO,eACA7D,SA5Oa6D,EA6ObG,aACAzK,OAjKWyK,EAkKX5D,QAxJJ,SAAiBrK,EAAGJ,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EAsIGmC,MA3HJ,SAAe2B,EAAGtD,EAAGJ,GACjB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GAmBb,OAlBAR,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKY,EAAKkD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAKa,EAAKiD,EAAE,GACnB9D,EAAO,GAAK4E,EAAKd,EAAE,GACnB9D,EAAO,GAAK4E,EAAKd,EAAE,GACnB9D,EAAO,IAAM4E,EAAKd,EAAE,IACpB9D,EAAO,IAAM4E,EAAKd,EAAE,IAChBA,IAAM9D,IACNA,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAoGG8K,eA7FJ,SAAwBF,EAAGxK,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAiBhC,OAhBAI,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK4K,EACZ5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM4K,EACb5K,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,CACV,EA2EG+K,aAnEJ,SAAsBjH,EAAG8G,EAAGxK,GACxB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,IAmBhC,OAlBAI,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,GAAK4K,EAAI9G,EAAE,GAClB9D,EAAO,IAAM4K,EAAI9G,EAAE,IACnB9D,EAAO,IAAM4K,EAAI9G,EAAE,IACfA,IAAM9D,IACNA,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,IACf9D,EAAO,IAAM8D,EAAE,KAEZ9D,CACV,EAgDL,CAKc0R,CAAa9R,GACnBqL,EAAQnQ,IAAI8E,EAAMC,IAEfA,CACX,CA2uBA,MAAM8R,EAAU,IAAIjS,IAuBpB,SAASkS,EAAShS,GACd,IAAIC,EAAM8R,EAAQ7R,IAAIF,GAKtB,OAJKC,IACDA,EA3uBR,SAAsBD,GAClB,MAAMyH,EAAO1C,EAAS/E,GAStB,SAASG,EAAOxB,EAAGC,EAAGC,EAAG0G,GACrB,MAAMnF,EAAS,IAAIJ,EAAK,GAaxB,YAZUK,IAAN1B,IACAyB,EAAO,GAAKzB,OACF0B,IAANzB,IACAwB,EAAO,GAAKxB,OACFyB,IAANxB,IACAuB,EAAO,GAAKvB,OACFwB,IAANkF,IACAnF,EAAO,GAAKmF,MAKrBnF,CACV,CASD,MAAM0B,EAAa3B,EA6BnB,SAAS8R,EAAc7L,EAAM0E,EAAgBtK,GACzC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BkS,EAA6B,GAAjBpH,EACZE,EAAI/M,KAAKG,IAAI8T,GAKnB,OAJA9R,EAAO,GAAK4K,EAAI5E,EAAK,GACrBhG,EAAO,GAAK4K,EAAI5E,EAAK,GACrBhG,EAAO,GAAK4K,EAAI5E,EAAK,GACrBhG,EAAO,GAAKnC,KAAKK,IAAI4T,GACd9R,CACV,CAyCD,SAASuB,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1ByC,EAAKjD,EAAE,GACPkD,EAAKlD,EAAE,GACP0F,EAAK1F,EAAE,GACP2S,EAAK3S,EAAE,GACPmD,EAAKpC,EAAE,GACPqC,EAAKrC,EAAE,GACP4E,EAAK5E,EAAE,GACP6R,EAAK7R,EAAE,GAKb,OAJAH,EAAO,GAAKqC,EAAK2P,EAAKD,EAAKxP,EAAKD,EAAKyC,EAAKD,EAAKtC,EAC/CxC,EAAO,GAAKsC,EAAK0P,EAAKD,EAAKvP,EAAKsC,EAAKvC,EAAKF,EAAK0C,EAC/C/E,EAAO,GAAK8E,EAAKkN,EAAKD,EAAKhN,EAAK1C,EAAKG,EAAKF,EAAKC,EAC/CvC,EAAO,GAAK+R,EAAKC,EAAK3P,EAAKE,EAAKD,EAAKE,EAAKsC,EAAKC,EACxC/E,CACV,CASD,MAAMyD,EAAMlC,EA4EZ,SAAS0Q,EAAM7S,EAAGe,EAAGG,EAAGF,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1ByC,EAAKjD,EAAE,GACPkD,EAAKlD,EAAE,GACP0F,EAAK1F,EAAE,GACP2S,EAAK3S,EAAE,GACb,IAYI8S,EACAC,EAbA5P,EAAKpC,EAAE,GACPqC,EAAKrC,EAAE,GACP4E,EAAK5E,EAAE,GACP6R,EAAK7R,EAAE,GACPiS,EAAW/P,EAAKE,EAAKD,EAAKE,EAAKsC,EAAKC,EAAKgN,EAAKC,EAUlD,GATII,EAAW,IACXA,GAAYA,EACZ7P,GAAMA,EACNC,GAAMA,EACNuC,GAAMA,EACNiN,GAAMA,GAIN,EAAMI,EAAW5S,EAAS,CAC1B,MAAM6S,EAAQxU,KAAK8E,KAAKyP,GAClBE,EAAWzU,KAAKG,IAAIqU,GAC1BH,EAASrU,KAAKG,KAAK,EAAIsC,GAAK+R,GAASC,EACrCH,EAAStU,KAAKG,IAAIsC,EAAI+R,GAASC,CAClC,MAEGJ,EAAS,EAAM5R,EACf6R,EAAS7R,EAMb,OAJAN,EAAO,GAAKkS,EAAS7P,EAAK8P,EAAS5P,EACnCvC,EAAO,GAAKkS,EAAS5P,EAAK6P,EAAS3P,EACnCxC,EAAO,GAAKkS,EAASpN,EAAKqN,EAASpN,EACnC/E,EAAO,GAAKkS,EAASH,EAAKI,EAASH,EAC5BhS,CACV,CAgKD,SAASsB,EAAKgE,EAAGlF,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKsF,EAAE,GACdtF,EAAO,GAAKsF,EAAE,GACdtF,EAAO,GAAKsF,EAAE,GACdtF,EAAO,GAAKsF,EAAE,GACPtF,CACV,CAQD,MAAMwD,EAAQlC,EAuBd,SAASpB,EAASd,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAQD,MAAM4C,EAAM1C,EAQZ,SAASK,EAAUC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,CAQD,MAAMmC,EAAQ5B,EAsBd,SAASI,EAAIvB,EAAGe,GACZ,OAAQf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,EACpE,CAwBD,SAASvB,EAAO4B,GACZ,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACb,OAAO3C,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,EACvD,CAMD,MAAM9H,EAAMzC,EAMZ,SAASmC,EAASP,GACd,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACb,OAAOI,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,CAC7C,CAMD,MAAM/F,EAAQrC,EAOd,SAASK,EAAUZ,EAAGJ,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACPa,EAAMxD,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,GAazD,OAZI9H,EAAM,MACNrB,EAAO,GAAKY,EAAKS,EACjBrB,EAAO,GAAKa,EAAKQ,EACjBrB,EAAO,GAAK4E,EAAKvD,EACjBrB,EAAO,GAAKmJ,EAAK9H,IAGjBrB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,GAETA,CACV,CAmCD,MAAMuS,EAAWlL,EAAKtH,SAChByS,EAAYnL,EAAKtH,SACjB0S,EAAYpL,EAAKtH,SAqCjB2S,EAAY,IAAI9S,EAAK,GACrB+S,EAAY,IAAI/S,EAAK,GAkB3B,MAAO,CACHG,SACA2B,aACA5G,IA/nBJ,SAAayD,EAAGC,EAAGC,EAAG0G,EAAG/E,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKzB,EACZyB,EAAO,GAAKxB,EACZwB,EAAO,GAAKvB,EACZuB,EAAO,GAAKmF,EACLnF,CACV,EAynBG6R,gBACAe,YAhmBJ,SAAqBtN,EAAGlF,GACpB,MAAMJ,EAAUI,GAAOiH,EAAKtH,OAAO,GAC7BqC,EAA0B,EAAlBvE,KAAK8E,KAAK2C,EAAE,IACpBsF,EAAI/M,KAAKG,IAAY,GAARoE,GAWnB,OAVIwI,EAAIpL,GACJQ,EAAO,GAAKsF,EAAE,GAAKsF,EACnB5K,EAAO,GAAKsF,EAAE,GAAKsF,EACnB5K,EAAO,GAAKsF,EAAE,GAAKsF,IAGnB5K,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,GAET,CAAEoC,QAAO4D,KAAMhG,EACzB,EAklBGoC,MA3kBJ,SAAehD,EAAGe,GACd,MAAMiN,EAAIzM,EAAIvB,EAAGe,GACjB,OAAOtC,KAAK8E,KAAK,EAAIyK,EAAIA,EAAI,EAChC,EAykBG7L,WACAkC,MACAmD,QAliBJ,SAAiBtB,EAAGoF,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BkS,EAA6B,GAAjBpH,EACZnF,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPuN,EAAKvN,EAAE,GACP/C,EAAK1E,KAAKG,IAAI8T,GACdE,EAAKnU,KAAKK,IAAI4T,GAKpB,OAJA9R,EAAO,GAAKuF,EAAKyM,EAAKa,EAAKtQ,EAC3BvC,EAAO,GAAKwF,EAAKwM,EAAKvM,EAAKlD,EAC3BvC,EAAO,GAAKyF,EAAKuM,EAAKxM,EAAKjD,EAC3BvC,EAAO,GAAK6S,EAAKb,EAAKzM,EAAKhD,EACpBvC,CACV,EAqhBG+G,QA7gBJ,SAAiBzB,EAAGoF,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BkS,EAA6B,GAAjBpH,EACZnF,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPuN,EAAKvN,EAAE,GACP9C,EAAK3E,KAAKG,IAAI8T,GACdE,EAAKnU,KAAKK,IAAI4T,GAKpB,OAJA9R,EAAO,GAAKuF,EAAKyM,EAAKvM,EAAKjD,EAC3BxC,EAAO,GAAKwF,EAAKwM,EAAKa,EAAKrQ,EAC3BxC,EAAO,GAAKyF,EAAKuM,EAAKzM,EAAK/C,EAC3BxC,EAAO,GAAK6S,EAAKb,EAAKxM,EAAKhD,EACpBxC,CACV,EAggBGgH,QAxfJ,SAAiB1B,EAAGoF,EAAgBtK,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BkS,EAA6B,GAAjBpH,EACZnF,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPuN,EAAKvN,EAAE,GACPP,EAAKlH,KAAKG,IAAI8T,GACdE,EAAKnU,KAAKK,IAAI4T,GAKpB,OAJA9R,EAAO,GAAKuF,EAAKyM,EAAKxM,EAAKT,EAC3B/E,EAAO,GAAKwF,EAAKwM,EAAKzM,EAAKR,EAC3B/E,EAAO,GAAKyF,EAAKuM,EAAKa,EAAK9N,EAC3B/E,EAAO,GAAK6S,EAAKb,EAAKvM,EAAKV,EACpB/E,CACV,EA2eGiS,QACAvR,QAxbJ,SAAiB4E,EAAGlF,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BkT,EAAKxN,EAAE,GACPyN,EAAKzN,EAAE,GACP0N,EAAK1N,EAAE,GACP2N,EAAK3N,EAAE,GACP3E,EAAMmS,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACzCC,EAASvS,EAAM,EAAIA,EAAM,EAK/B,OAJAX,EAAO,IAAM8S,EAAKI,EAClBlT,EAAO,IAAM+S,EAAKG,EAClBlT,EAAO,IAAMgT,EAAKE,EAClBlT,EAAO,GAAKiT,EAAKC,EACVlT,CACV,EA4aGmT,UAlaJ,SAAmB7N,EAAGlF,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,IAAMsF,EAAE,GACftF,EAAO,IAAMsF,EAAE,GACftF,EAAO,IAAMsF,EAAE,GACftF,EAAO,GAAKsF,EAAE,GACPtF,CACV,EA4ZGoT,QAlZJ,SAAiBtP,EAAG1D,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAY1ByT,EAAQvP,EAAE,GAAKA,EAAE,GAAKA,EAAE,IAC9B,GAAIuP,EAAQ,EAAK,CAEb,MAAMC,EAAOzV,KAAKiD,KAAKuS,EAAQ,GAC/BrT,EAAO,GAAK,GAAMsT,EAClB,MAAMC,EAAU,GAAMD,EACtBtT,EAAO,IAAM8D,EAAE,GAAKA,EAAE,IAAMyP,EAC5BvT,EAAO,IAAM8D,EAAE,GAAKA,EAAE,IAAMyP,EAC5BvT,EAAO,IAAM8D,EAAE,GAAKA,EAAE,IAAMyP,CAC/B,KACI,CAED,IAAIC,EAAI,EACJ1P,EAAE,GAAKA,EAAE,KACT0P,EAAI,GAEJ1P,EAAE,IAAMA,EAAM,EAAJ0P,EAAQA,KAClBA,EAAI,GAER,MAAMC,GAAKD,EAAI,GAAK,EACd/S,GAAK+S,EAAI,GAAK,EACdF,EAAOzV,KAAKiD,KAAKgD,EAAM,EAAJ0P,EAAQA,GAAK1P,EAAM,EAAJ2P,EAAQA,GAAK3P,EAAM,EAAJrD,EAAQA,GAAK,GACpET,EAAOwT,GAAK,GAAMF,EAClB,MAAMC,EAAU,GAAMD,EACtBtT,EAAO,IAAM8D,EAAM,EAAJ2P,EAAQhT,GAAKqD,EAAM,EAAJrD,EAAQgT,IAAMF,EAC5CvT,EAAOyT,IAAM3P,EAAM,EAAJ2P,EAAQD,GAAK1P,EAAM,EAAJ0P,EAAQC,IAAMF,EAC5CvT,EAAOS,IAAMqD,EAAM,EAAJrD,EAAQ+S,GAAK1P,EAAM,EAAJ0P,EAAQ/S,IAAM8S,CAC/C,CACD,OAAOvT,CACV,EAyWG0T,UA9VJ,SAAmBC,EAAiBC,EAAiBC,EAAiBC,EAAO1T,GACzE,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BmU,EAA+B,GAAlBJ,EACbK,EAA+B,GAAlBJ,EACbK,EAA+B,GAAlBJ,EACbK,EAAKrW,KAAKG,IAAI+V,GACdI,EAAKtW,KAAKK,IAAI6V,GACdK,EAAKvW,KAAKG,IAAIgW,GACdK,EAAKxW,KAAKK,IAAI8V,GACdM,EAAKzW,KAAKG,IAAIiW,GACdM,EAAK1W,KAAKK,IAAI+V,GACpB,OAAQH,GACJ,IAAK,MACD9T,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,IAAK,MACDtU,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,IAAK,MACDtU,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,IAAK,MACDtU,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,IAAK,MACDtU,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,IAAK,MACDtU,EAAO,GAAKkU,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EACrCtU,EAAO,GAAKmU,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EACrCtU,EAAO,GAAKmU,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EACrCvU,EAAO,GAAKmU,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EACrC,MACJ,QACI,MAAM,IAAIE,MAAM,2BAA2BV,KAEnD,OAAO9T,CACV,EA2SGsB,OACAkC,QACAvB,IA9QJ,SAAa7C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,EAwQGE,WACA0C,MACArC,YACA4B,QACAc,UAtNJ,SAAmBzC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,EAgNGW,MACAN,KA7LJ,SAAcjB,EAAGe,EAAGG,EAAGF,GACnB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IAC1BY,CACV,EAuLGpB,SACAyC,MACAN,WACAqC,QACAhC,YACAyB,oBAtHJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,CAC/B,EAkHGuD,OA3GJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,EACxE,EA0GGmH,SApGJ,SAAkBlH,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACLA,CACV,EA8FGyU,WAlFJ,SAAoBC,EAAOC,EAAOvU,GAC9B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1Be,EAAM0G,EAAK1G,IAAI+T,EAAOC,GAC5B,OAAIhU,GAAO,SACP0G,EAAKlE,MAAMqP,EAAWkC,EAAOnC,GACzBlL,EAAKhG,IAAIkR,GAAY,MACrBlL,EAAKlE,MAAMsP,EAAWiC,EAAOnC,GAEjClL,EAAKjG,UAAUmR,EAAUA,GACzBV,EAAcU,EAAU1U,KAAKC,GAAIkC,GAC1BA,GAEFW,EAAM,SACXX,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACLA,IAGPqH,EAAKlE,MAAMuR,EAAOC,EAAOpC,GACzBvS,EAAO,GAAKuS,EAAS,GACrBvS,EAAO,GAAKuS,EAAS,GACrBvS,EAAO,GAAKuS,EAAS,GACrBvS,EAAO,GAAK,EAAIW,EACTS,EAAUpB,EAAQA,GAEhC,EAwDG4U,OA3CJ,SAAgBxV,EAAGe,EAAGwK,EAAGyC,EAAG9M,EAAGF,GAC3B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAIhC,OAHAqS,EAAM7S,EAAGgO,EAAG9M,EAAGoS,GACfT,EAAM9R,EAAGwK,EAAGrK,EAAGqS,GACfV,EAAMS,EAAWC,EAAW,EAAIrS,GAAK,EAAIA,GAAIN,GACtCA,CACV,EAuCL,CA2Bc6U,CAAajV,GACnB+R,EAAQ7W,IAAI8E,EAAMC,IAEfA,CACX,CAgpBA,MAAMiV,EAAQ,IAAIpV,IAuBlB,SAASqV,EAAOnV,GACZ,IAAIC,EAAMiV,EAAMhV,IAAIF,GAKpB,OAJKC,IACDA,EAhpBR,SAAoBD,GAShB,SAASG,EAAOxB,EAAGC,EAAGC,EAAG0G,GACrB,MAAMnF,EAAS,IAAIJ,EAAK,GAaxB,YAZUK,IAAN1B,IACAyB,EAAO,GAAKzB,OACF0B,IAANzB,IACAwB,EAAO,GAAKxB,OACFyB,IAANxB,IACAuB,EAAO,GAAKvB,OACFwB,IAANkF,IACAnF,EAAO,GAAKmF,MAKrBnF,CACV,CA6HD,SAASE,EAASd,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAwCD,SAASK,EAAKjB,EAAGe,EAAGG,EAAGF,GACnB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IACjCY,EAAO,GAAKZ,EAAE,GAAKkB,GAAKH,EAAE,GAAKf,EAAE,IAC1BY,CACV,CA4DD,SAASO,EAAUC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,CA8BD,SAASU,EAAQF,EAAGJ,GAChB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GAClBR,EAAO,GAAK,EAAIQ,EAAE,GACXR,CACV,CAsBD,SAASpB,EAAO4B,GACZ,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACb,OAAO3C,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,EACvD,CAYD,SAASpI,EAASP,GACd,MAAMI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACb,OAAOI,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,CAC7C,CAaD,SAASnI,EAAS5B,EAAGe,GACjB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACd0E,EAAKzF,EAAE,GAAKe,EAAE,GACd6U,EAAK5V,EAAE,GAAKe,EAAE,GACpB,OAAOtC,KAAKiD,KAAKG,EAAKA,EAAKC,EAAKA,EAAK2D,EAAKA,EAAKmQ,EAAKA,EACvD,CAcD,SAAS7T,EAAW/B,EAAGe,GACnB,MAAMc,EAAK7B,EAAE,GAAKe,EAAE,GACde,EAAK9B,EAAE,GAAKe,EAAE,GACd0E,EAAKzF,EAAE,GAAKe,EAAE,GACd6U,EAAK5V,EAAE,GAAKe,EAAE,GACpB,OAAOc,EAAKA,EAAKC,EAAKA,EAAK2D,EAAKA,EAAKmQ,EAAKA,CAC7C,CAcD,SAAS5T,EAAUZ,EAAGJ,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BgB,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPoE,EAAKpE,EAAE,GACP2I,EAAK3I,EAAE,GACPa,EAAMxD,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,EAAK+D,EAAKA,EAAKuE,EAAKA,GAazD,OAZI9H,EAAM,MACNrB,EAAO,GAAKY,EAAKS,EACjBrB,EAAO,GAAKa,EAAKQ,EACjBrB,EAAO,GAAK4E,EAAKvD,EACjBrB,EAAO,GAAKmJ,EAAK9H,IAGjBrB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,GAETA,CACV,CAsBD,SAASsB,EAAKd,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACdR,EAAO,GAAKQ,EAAE,GACPR,CACV,CAiBD,SAASuB,EAASnC,EAAGe,EAAGC,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAkBD,SAASwB,EAAOpC,EAAGe,EAAGC,GAClB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,CAiDD,SAASyB,EAAUrC,EAAGiC,EAAKjB,GACvB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAEhC,OADAwB,EAAUhC,EAAGY,GACNO,EAAUP,EAAQqB,EAAKrB,EACjC,CA0BD,MAAO,CACHD,SACA2B,WAxiBe3B,EAyiBfjF,IA7hBJ,SAAayD,EAAGC,EAAGC,EAAG0G,EAAG/E,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKzB,EACZyB,EAAO,GAAKxB,EACZwB,EAAO,GAAKvB,EACZuB,EAAO,GAAKmF,EACLnF,CACV,EAuhBG2B,KAhhBJ,SAAcnB,EAAGJ,GACb,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACxBR,EAAO,GAAKnC,KAAK8D,KAAKnB,EAAE,IACjBR,CACV,EA0gBG4B,MAngBJ,SAAepB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IACzBR,EAAO,GAAKnC,KAAK+D,MAAMpB,EAAE,IAClBR,CACV,EA6fG6B,MAtfJ,SAAerB,EAAGJ,GACd,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IACzBR,EAAO,GAAKnC,KAAKgE,MAAMrB,EAAE,IAClBR,CACV,EAgfG8B,MAveJ,SAAetB,EAAGuB,EAAM,EAAGC,EAAM,EAAG5B,GAChC,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KAC1CR,EAAO,GAAKnC,KAAKkE,IAAIC,EAAKnE,KAAKmE,IAAID,EAAKvB,EAAE,KACnCR,CACV,EAieGiC,IAzdJ,SAAa7C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACrBH,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GACdH,CACV,EAmdGkC,UA1cJ,SAAmB9C,EAAGe,EAAGgC,EAAO/B,GAC5B,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EAC1BnC,EAAO,GAAKZ,EAAE,GAAKe,EAAE,GAAKgC,EACnBnC,CACV,EAocGE,WACA0C,IA9aQ1C,EA+aR2C,oBAxaJ,SAA6BzD,EAAGe,GAC5B,OAAOtC,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GAC3B3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,GACxB3B,KAAKiF,IAAI1D,EAAE,GAAKe,EAAE,IAAMX,CAC/B,EAoaGuD,OA7ZJ,SAAgB3D,EAAGe,GACf,OAAOf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,IAAMf,EAAE,KAAOe,EAAE,EACxE,EA4ZGE,OACA2C,MAhYJ,SAAe5D,EAAGe,EAAGG,EAAGF,GACpB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IACpCY,EAAO,GAAKZ,EAAE,GAAKkB,EAAE,IAAMH,EAAE,GAAKf,EAAE,IAC7BY,CACV,EA0XGgC,IAhXJ,SAAa5C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKmE,IAAI5C,EAAE,GAAIe,EAAE,IACtBH,CACV,EA0WG+B,IAhWJ,SAAa3C,EAAGe,EAAGC,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IAC7BH,EAAO,GAAKnC,KAAKkE,IAAI3C,EAAE,GAAIe,EAAE,IACtBH,CACV,EA0VGO,YACA4B,MApUU5B,EAqUV0C,UA7TJ,SAAmBzC,EAAGC,EAAGL,GACrB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACnBT,EAAO,GAAKQ,EAAE,GAAKC,EACZT,CACV,EAuTGU,UACAwC,OAnSWxC,EAoSXC,IA7RJ,SAAavB,EAAGe,GACZ,OAAQf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,GAAOf,EAAE,GAAKe,EAAE,EACpE,EA4RGvB,SACAyC,IA3QQzC,EA4QRmC,WACAqC,MA3PUrC,EA4PVC,WACAqC,KAzOSrC,EA0OTG,aACAmC,OAvNWnC,EAwNXC,YACAmC,OAvLJ,SAAgB/C,EAAGJ,GACf,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACfR,EAAO,IAAMQ,EAAE,GACRR,CACV,EAiLGsB,OACAkC,MA3JUlC,EA4JVC,WACAkC,IApIQlC,EAqIRC,SACAkC,IA7GQlC,EA8GRoC,KAxGJ,SAAcxD,GACV,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAKhC,OAJAI,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACLA,CACV,EAkGG6D,cA1FJ,SAAuBrD,EAAGsD,EAAG1D,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAC1BrB,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GACN2E,EAAI3E,EAAE,GAKZ,OAJAR,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,IAAMqB,EACrDnF,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,GAAKrF,EAAIqF,EAAE,IAAMqB,EACrDnF,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,IAAMrF,EAAIqF,EAAE,IAAMqB,EACtDnF,EAAO,GAAK8D,EAAE,GAAKvF,EAAIuF,EAAE,GAAKtF,EAAIsF,EAAE,IAAMrF,EAAIqF,EAAE,IAAMqB,EAC/CnF,CACV,EAgFGyB,YACA6C,SA7DJ,SAAkBlF,EAAGmF,EAAQnE,GACzB,MAAMJ,EAAUI,GAAO,IAAIR,EAAK,GAChC,OAAIhB,EAAOQ,GAAKmF,EACL9C,EAAUrC,EAAGmF,EAAQvE,GAEzBsB,EAAKlC,EAAGY,EAClB,EAwDGwE,SAhDJ,SAAkBpF,EAAGe,EAAGC,GAEpB,OAAOC,EAAKjB,EAAGe,EAAG,GADFC,GAAO,IAAIR,EAAK,GAEnC,EA+CL,CA2BcqV,CAAWrV,GACjBkV,EAAMha,IAAI8E,EAAMC,IAEbA,CACX,CASA,SAASqV,EAAcC,EAAUC,EAAUC,EAAUC,EAAUC,EAAUC,GACrE,MAAO,CAEHC,KAAMtO,EAASgO,GAEfO,KAAMxK,EAASkK,GAEfO,KAAM/D,EAASyD,GAEfjO,KAAMzH,EAAS2V,GAEfjO,KAAM1C,EAAS4Q,GAEfK,KAAMb,EAAOS,GAErB,CACA,MAAMC,KAKNA,EAAIC,KAKJA,EAAIC,KAKJA,EAAIvO,KAKJA,EAAIC,KAKJA,EAAIuO,KAKJA,GAAUV,EAAclb,aAAcA,aAAcA,aAAcA,aAAcA,aAAcA,cA+B7Ekb,EAAcW,aAAcA,aAAcA,aAAcA,aAAcA,aAAcA,cA+BpFX,EAAcjW,EAAW6W,MAAOA,MAAOA,MAAOA,MAAOA,aCpiLzDC,EACTlc,SACAqX,OACAC,GACApU,WACAE,iBACA+Y,IACAC,YACApF,KACAC,IACAoF,YAAcP,EAAK5V,SACnBiB,SACAmV,gBAAkB,IAClBnQ,KAAOqB,EAAKtH,SAEZ,WAAAtH,CAAYoB,EAAoCqX,EAAkCC,EAA8B6E,EAAaC,EAAqBpF,EAAcC,GAC5JpY,KAAKmB,SAAW,IAAIG,aAAaH,GACjCnB,KAAKwY,OAAS,IAAIlX,aAAakX,GAC/BxY,KAAKyY,GAAK,IAAInX,aAAamX,GAC3BzY,KAAKsd,IAAMA,EAAMnY,KAAKC,GAAK,IAC3BpF,KAAKud,YAAcA,EACnBvd,KAAKmY,KAAOA,EACZnY,KAAKoY,IAAMA,EACXpY,KAAKsI,SAAWqG,EAAKzI,OAAOyI,EAAKnH,SAAS,IAAIlG,aAAa,GAAIH,EAAUqX,IACzExY,KAAKqE,WAAa2Y,EAAKpE,OAAO5Y,KAAKmB,SAAUnB,KAAKwY,OAAQxY,KAAKyY,IAC/DzY,KAAKuE,iBAAmByY,EAAK9F,YAAYlX,KAAKsd,IAAKtd,KAAKud,YAAavd,KAAKmY,KAAMnY,KAAKoY,IACxF,CAED,gBAAAsF,GACIV,EAAKpE,OAAO5Y,KAAKmB,SAAUnB,KAAKwY,OAAQxY,KAAKyY,GAAIzY,KAAKqE,WACzD,CAED,WAAAsZ,CAAYxc,GACRnB,KAAKmB,SAAW,IAAIG,aAAaH,GACjCnB,KAAK0d,kBACR,CAED,sBAAAE,GACIZ,EAAK9F,YAAYlX,KAAKsd,IAAKtd,KAAKud,YAAavd,KAAKmY,KAAMnY,KAAKoY,IAAKpY,KAAKuE,iBAC1E,CAED,IAAAsZ,CAAKC,GACDnP,EAAKpF,IAAIvJ,KAAKmB,SAAU2c,EAAW9d,KAAKmB,UACxCnB,KAAK0d,kBACR,QC5CQK,EACDld,OACAmd,OACAC,aAAuB,EACvBC,WAA4B,KAC5BC,WAA4B,KAC5BC,WAAa,CAAEvY,EAAG,EAAGC,EAAG,GAGhC,WAAA/F,CAAYc,EAAgBmd,GACxBhe,KAAKa,OAASA,EACdb,KAAKge,OAASA,EACdhe,KAAKqe,uBACLre,KAAKse,mBACR,CAEO,oBAAAD,GACJE,OAAOC,iBAAiB,UAAWxe,KAAKye,cAC3C,CACO,iBAAAH,GACJte,KAAKge,OAAOQ,iBAAiB,YAAaxe,KAAK0e,iBAC/C1e,KAAKge,OAAOQ,iBAAiB,UAAWxe,KAAK2e,eAC7C3e,KAAKge,OAAOQ,iBAAiB,YAAaxe,KAAK4e,gBAClD,CAEDF,gBAAmBG,IACf7e,KAAKie,aAAc,EACnBje,KAAKke,WAAaW,EAAMC,QACxB9e,KAAKme,WAAaU,EAAME,OAAO,EAGnCJ,cAAgB,KACZ3e,KAAKie,aAAc,CAAK,EAG5BW,gBAAmBC,IACf,IAAK7e,KAAKie,YACN,OAEJ,MAAMe,EAASH,EAAMC,SAAW9e,KAAKke,YAAcW,EAAMC,SACnDG,EAASJ,EAAME,SAAW/e,KAAKme,YAAcU,EAAME,SAEzD/e,KAAKoe,WAAWvY,GAAKmZ,EACrBhf,KAAKoe,WAAWtY,GAAKmZ,EAErBjf,KAAKke,WAAaW,EAAMC,QACxB9e,KAAKme,WAAaU,EAAME,QACxB9e,QAAQC,IAAI8e,EAAQC,EAAO,EAG/B,iBAAAC,CAAkBC,GAId,IAAIta,EAASM,KAAKiD,KAAKpI,KAAKa,OAAOM,SAAS,IAAM,EAAInB,KAAKa,OAAOM,SAAS,IAAM,EAAInB,KAAKa,OAAOM,SAAS,IAAM,GAC5G+D,EAAQC,KAAKia,MAAMpf,KAAKa,OAAOM,SAAS,GAAInB,KAAKa,OAAOM,SAAS,IACjEuE,EAAMP,KAAK8E,KAAKjK,KAAKa,OAAOM,SAAS,GAAK0D,GAE9CK,GAASlF,KAAKoe,WAAWvY,EAAIsZ,EAPV,GAQnBzZ,GAAO1F,KAAKoe,WAAWtY,EAAIqZ,EARR,GAWnBzZ,EAAMP,KAAKmE,IAAI,GAAKnE,KAAKkE,IAAIlE,KAAKC,GAAK,GAAKM,IAG5C1F,KAAKa,OAAO8c,YAAY,CAAC9Y,EAASM,KAAKG,IAAII,GAAOP,KAAKG,IAAIJ,GAAQL,EAASM,KAAKK,IAAIE,GAAMb,EAASM,KAAKG,IAAII,GAAOP,KAAKK,IAAIN,KAE7HlF,KAAKoe,WAAWvY,EAAI,EACpB7F,KAAKoe,WAAWtY,EAAI,CACvB,CAGO2Y,cAAiBI,IACrB,OAAQA,EAAMQ,KACV,IAAK,UACD,IAAK,IACLrf,KAAKsf,WAAW,CAAC,EAAG,GAAI,KACxB,MACJ,IAAK,YACL,IAAK,IACDtf,KAAKsf,WAAW,CAAC,EAAG,EAAG,KACvB,MACJ,IAAK,YACL,IAAK,IACDtf,KAAKsf,WAAW,EAAE,GAAK,EAAG,IAC1B,MACJ,IAAK,aACL,IAAK,IACDtf,KAAKsf,WAAW,CAAC,GAAK,EAAG,IACzB,MACJ,IAAK,IACDtf,KAAKsf,WAAW,CAAC,EAAG,GAAK,IACzB,MACJ,IAAK,IACDtf,KAAKsf,WAAW,CAAC,GAAI,GAAK,IAGlCT,EAAMU,gBAAgB,EAGlB,UAAAD,CAAWxB,GACf9d,KAAKa,OAAOgd,KAAKC,EACpB,QClGQ0B,EACDxB,OACAyB,QACA5f,OACA6f,gBAAoC,aACpCC,MACA9e,OACA+e,eAER,WAAA7f,CAAY8f,GACR7f,KAAKge,OAAS8B,SAASC,eAAeF,GACtC7f,KAAKggB,mBAAmBC,MAAK,KACzBjgB,KAAKkgB,cAELlgB,KAAKa,OAAS,IAAIwc,EAAO,CAAC,EAAK,EAAK,GAAM,CAAC,EAAK,EAAK,GAAM,CAAC,EAAK,EAAK,GAAM,GAAIrd,KAAKge,OAAOmC,MAAQngB,KAAKge,OAAOoC,OAAQ,GAAK,KAE7HpgB,KAAK4f,eAAiB,IAAI7B,EAAe/d,KAAKa,OAAQb,KAAKge,QAC3Dhe,KAAK2f,MAAQ,IAAI/f,EAAMI,KAAKH,QAC5B,MAAMwgB,EAAW,IAAItf,EAASf,KAAKH,OAAQ,CAAC,EAAK,EAAK,EAAK,GAAM,CAAC,GAAK,GAAK,IACtEygB,EAAY,IAAIvf,EAASf,KAAKH,OAAQ,CAAC,EAAK,EAAK,EAAK,GAAM,CAAC,EAAK,EAAK,IACvE0gB,EAAS,IAAI5b,EAAO3E,KAAKH,OAAQ,CAAC,EAAK,EAAK,EAAK,GAAM,CAAC,EAAK,GAAK,GAAM,IAC9EG,KAAK2f,MAAMxf,UAAUkgB,GACrBrgB,KAAK2f,MAAMxf,UAAUmgB,GACrBtgB,KAAK2f,MAAMxf,UAAUogB,GACrBvgB,KAAKwgB,oBAAoB,IAC1BC,OAAMC,IACLzgB,QAAQygB,MAAM,+BAAgCA,EAAM,GAE3D,CAEO,sBAAMV,GACV,IAAKW,UAAUC,IACX,MAAM,IAAI9E,MAAM,4BAGpB,MAAM+E,QAAgBF,UAAUC,IAAIE,iBACpC,IAAKD,EACD,MAAM,IAAI/E,MAAM,8BAGpB9b,KAAKH,aAAeghB,EAAQE,gBAC5B/gB,KAAKyf,QAAUzf,KAAKge,OAAOgD,WAAW,UAEbzC,OAAO0C,iBAE5BjhB,KAAKge,OAAOkD,YACZlhB,KAAKge,OAAOmD,aAEhB,MAAMC,EAAwC,CAC1CvhB,OAAQG,KAAKH,OACbwhB,UAAW,SACX9d,OAAQvD,KAAK0f,iBAEjB1f,KAAKyf,QAAQ6B,UAAUF,EAC1B,CAEO,WAAAlB,GACJ,MAAMqB,EAAiBvhB,KAAKH,OAAO2hB,uBAG7BC,EAAgD,CAClDC,iBAAkB,CAAC,CACfC,KAJY3hB,KAAKyf,QAAQmC,oBAAoBC,aAK7CC,OAAQ,QACRC,WAAY,CAAE3T,EAAG,EAAG4T,EAAG,EAAGva,EAAG,EAAGf,EAAG,GACnCub,QAAS,WAIGV,EAAeW,gBAAgBT,GACvCU,MAEZ,MAAMC,EAAWb,EAAec,SAChCriB,KAAKH,OAAOsE,MAAMme,OAAO,CAACF,GAC7B,CAEO,kBAAA5B,GACJ,MAAM+B,EAAQ,KACVviB,KAAKwiB,SACLC,sBAAsBF,EAAM,EAEhCE,sBAAsBF,EACzB,CAEO,MAAAC,GAEJxiB,KAAKa,OAAO6c,mBACZ1d,KAAKa,OAAO+c,yBACZ5d,KAAK4f,eAAeV,kBAAkB,KAEtC,MAAMqC,EAAiBvhB,KAAKH,OAAO2hB,uBAG7BC,EAAgD,CAClDC,iBAAkB,CAAC,CACfC,KAJY3hB,KAAKyf,QAAQmC,oBAAoBC,aAK7CC,OAAQ,QACRC,WAAY,CAAE3T,EAAG,EAAG4T,EAAG,EAAGva,EAAG,EAAGf,EAAG,GACnCub,QAAS,WAIXrhB,EAAc2gB,EAAeW,gBAAgBT,GAEnDzhB,KAAK2f,MAAMhf,KAAKC,EAAaZ,KAAKa,QAClCD,EAAYuhB,MAEZ,MAAMC,EAAWb,EAAec,SAChCriB,KAAKH,OAAOsE,MAAMme,OAAO,CAACF,GAC7B,GCjHLM,iBACI,IAAK/B,UAAUC,IAEX,OADA3gB,QAAQygB,MAAM,4CACP,EAGX,IACI,MAAMG,QAAgBF,UAAUC,IAAIE,iBACpC,IAAKD,EAED,OADA5gB,QAAQygB,MAAM,+BACP,EAGX,UADqBG,EAAQE,gBAGzB,OADA9gB,QAAQygB,MAAM,8BACP,CAEd,CAAC,MAAOA,GAEL,OADAzgB,QAAQygB,MAAM,+CAAgDA,IACvD,CACV,CAGD,OADAzgB,QAAQC,IAAI,yBACL,CACX,EAEAyiB,GAAqB1C,MAAM2C,IACnBA,GACA3iB,QAAQC,IAAI,+BACK,IAAIsf,EAAS,cAG9Bvf,QAAQC,IAAI,mEACf"}