{"version":3,"file":"bundle.js","sources":["../src/engine/scene.ts","../src/engine/objects/triangle.ts","../src/engine/objects/sphere.ts","../src/engine/loaders/texture-loader.ts","../../node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js","../src/engine/camera/camera.ts","../src/engine/camera/camera-controls.ts","../src/engine/renderer.ts","../src/main.ts"],"sourcesContent":[null,null,null,null,"/* wgpu-matrix@3.1.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n",null,null,null,null],"names":["Scene","device","objects","constructor","this","console","log","addObject","object","push","removeObject","index","indexOf","splice","getObjects","draw","passEncoder","camera","obj","Triangle","pipeline","vertexBuffer","color","position","uniformBuffer","bindGroup","Float32Array","initializeBuffers","createPipeline","createVertexBuffer","createUniformBuffer","vertices","createBuffer","size","byteLength","usage","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","set","unmap","UNIFORM","COPY_DST","fragmentShaderCode","join","createRenderPipeline","label","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","createBindGroup","bindGroupLayout","getBindGroupLayout","entries","binding","resource","buffer","queue","writeBuffer","viewMatrix","byteOffset","projectionMatrix","setPipeline","setVertexBuffer","setBindGroup","Sphere","indexBuffer","radius","numIndices","texture","sampler","segments","indices","lat","theta","Math","PI","sinTheta","sin","cosTheta","cos","lon","phi","sinPhi","cosPhi","x","y","z","u","v","first","second","length","INDEX","Uint32Array","async","imageUrl","img","Image","src","decode","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","writeTexture","data","bytesPerRow","rowsPerImage","depthOrArrayLayers","loadTexture","createSampler","magFilter","minFilter","addressModeU","addressModeV","createView","setIndexBuffer","drawIndexed","ZeroArray","OriginalConstructor","modifier","a","fill","args","super","EPSILON","cache$5","Map","getAPI$5","Ctor","api","get","create","newDst","undefined","subtract","b","dst","lerp","t","mulScalar","k","inverse","dot","v0","v1","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","fromValues","ceil","floor","round","clamp","min","max","add","addScaled","scale","angle","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","abs","equals","lerpV","divScalar","invert","cross","lenSq","dist","distSq","negate","clone","mul","div","random","zero","transformMat4","m","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl$5","cache$4","getAPI$4","v2","dz","az","bz","t1","t2","zScale","w","transformMat4Upper3x3","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","rotateX","p","r","rotateY","rotateZ","getAPIImpl$4","cache$3","getAPI$3","vec2","vec3","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","transpose","determinant","setTranslation","setAxis","get3DScaling","translation","translate","rotation","angleInRadians","c","s","scaling","uniformScaling","uniformScale","getAPIImpl$3","cache$2","getAPI$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","d","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","right","bottom","top","near","far","frustum","frustumReverseZ","aim","target","up","cameraAim","eye","lookAt","rotationX","rotationY","rotationZ","getAPIImpl$2","cache$1","getAPI$1","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","i","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","getAPIImpl$1","cache","getAPI","dw","getAPIImpl","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","mat4","quat","vec4","Float64Array","Array","Camera","fov","aspectRatio","orientation","angularVelocity","updateViewMatrix","setAspectRatio","updateProjectionMatrix","setPosition","move","direction","CameraControls","isMouseDown","lastMouseX","lastMouseY","mouseDelta","addKeyboardListeners","addMouseListeners","window","addEventListener","handleKeyDown","handleMouseDown","handleMouseUp","handleMouseMove","event","clientX","clientY","deltaX","deltaY","updateCameraOrbit","deltaTime","atan2","key","moveCamera","preventDefault","Renderer","context","swapChainFormat","scene","cameraControls","depthTexture","canvasId","getElementById","initializeWebGPU","then","clearCanvas","createDepthTexture","resizeCanvas","triangle","triangle2","sphere","startRenderingLoop","catch","error","destroy","navigator","gpu","adapter","requestAdapter","requestDevice","devicePixelRatio","clientWidth","clientHeight","configuration","alphaMode","configure","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","view","getCurrentTexture","loadOp","clearValue","g","storeOp","beginRenderPass","end","commands","finish","submit","frame","render","requestAnimationFrame","depthStencilAttachment","depthLoadOp","depthClearValue","depthStoreOp","checkWebGPUSupport","supported"],"mappings":"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"}